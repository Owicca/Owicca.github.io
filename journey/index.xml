<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Journeys on Down the wabbit's hole</title><link>https://www.dinudev.com/journey/</link><description>Recent content in Journeys on Down the wabbit's hole</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 26 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dinudev.com/journey/index.xml" rel="self" type="application/rss+xml"/><item><title>Info</title><link>https://www.dinudev.com/journey/1_info/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/1_info/</guid><description>Introduction: The best way to learn something fast is to start doing it. This is the beginning of my journey in reverse engineering.</description></item><item><title>Jetbrains license server</title><link>https://www.dinudev.com/journey/2_jb_license_server/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/2_jb_license_server/</guid><description>logic: a tls priv-public key pair exists clients have the public key, the servers have the private key the client sends a request with his unique set of identifying information encoded response = rsa detached signature = hash the content then sign with private key the server checks the info and sends a response back: the response is the content + encoded response signing: encode data to be signed as string, then hash with md5, then sign the resulted detached signature is the encoded response methods: endpoints: /rpc/ping.</description></item><item><title>WrapLogin</title><link>https://www.dinudev.com/journey/3_wraplogin/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/3_wraplogin/</guid><description>flow: setup a signal handler h for signum n: n = 14d = SIGALRM h = connection connection: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) schedule a n seconds signal alarm: n = 1d alarm(1) emulate &amp;ldquo;/bin/login&amp;rdquo; by asking a password from the user if password == &amp;ldquo;door&amp;rdquo;: alarm(0) execl(&amp;quot;/bin/sh&amp;quot;, &amp;quot;/bin/sh&amp;quot;, &amp;quot;-i&amp;quot;) exit(0) else: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) imports: execl execv strcmp signal scanf alarm exports: execute connection passwd strings: /bin/login door /bin/sh /bin/.</description></item></channel></rss>