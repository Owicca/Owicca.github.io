<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Databases on Down the wabbit's hole</title><link>https://www.dinudev.com/categories/databases/</link><description>Recent content in Databases on Down the wabbit's hole</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 26 Jan 2023 12:00:00 +0000</lastBuildDate><atom:link href="https://www.dinudev.com/categories/databases/index.xml" rel="self" type="application/rss+xml"/><item><title>DB design for mere mortals</title><link>https://www.dinudev.com/post/db_design_for_mere_mortals/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/db_design_for_mere_mortals/</guid><description>relational db design: relational db: what is a database?: a collection of structured data, used to model a system&amp;rsquo;s process organised data for a specific purpose types of dbs? operational vs analytical databases: operational: dbs where data changes often(daily) and fresh changes need to be available almost instantly analytical: dbs where change happens rarely and are mainly used to model trends, extract statistics or archive data what is a relational database?</description></item><item><title>MySQL</title><link>https://www.dinudev.com/post/mysql/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/mysql/</guid><description>concepts: locking: when making changes to data, a lock is aquired that prevents any read or write until the transaction finishes and the lock is released if succesfull data is updated, the other transactions in the queue get to use the new data if failed the other transactions in the queue get to use the initial data in non-trivial systems this can be slow, because every transaction in the queue needs to wait for the others in front to finis, making the process sequential multiversion concurency control: the system gives the readers the initial data, while the transaction is still ongoing(not fully commited) write-ahead-logging(WAL): a copy of the instructions needed for the change are first written to a safe log, THEN the actions are done on crash, a recovery to a stable state is made by reverting to a known valid checkpoint and a recovery of the invalid actions is redone from the WAL examples: journaling in fs transactions in db shadow paging: a page is a fixed size blob that contains data when starting a transaction, a page is created and only pointed to by the transaction manager, when the transaction is completed, the pointer to the old page is changed with the pointer to the new page, if the transaction failed, the shadow page is simply deleted myisam2innodb: [] every table should have a primary key [] innodb can have deadlocks even if there are no transactions common: b-tree index full-text searches myisam: lock: table cache: only keys (by loading the .</description></item><item><title>mysqldump</title><link>https://www.dinudev.com/post/mysqldump/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/mysqldump/</guid><description>mysql: to drop a table and ignore foreign key errors, use ALTER TABLE &amp;lt;name&amp;gt; DISABLE KEYS when inserting multiple rows, if one row is invalid, no rows are inserted, to insert only valid ones and ignore errors from invalid ones use INSERT IGNORE INTO &amp;lt;table&amp;gt; ... mysqldump: --all-databases / -A --databases / -B: specified names are treated as db names --tables / -T: specified names are treated as table names, overrides -B --no-create-db / -n: don&amp;rsquo;t add CREATE DATABASE .</description></item><item><title>Redis</title><link>https://www.dinudev.com/post/redis/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/redis/</guid><description>misc: in-memory key-value db values are primitive data structures is backed on disk at specified time intervals or when certain rules are met single-threaded the only size limitation is the available memory keys are binary safe: max key size: 512MB max value size: 512MB operations: modifiers: set: ex: set k v ex(expire in s seconds): set k v ex s ex(expire in ms milliseconds): set k v px ms del: info: return 1 or 0 ex: del k expire: info: set expiration in s ex: expire k s pexpire: info: set expiration in ms ex: pexpire k ms persist: info: remove expire time from a key ex: persist k incr: info: interpret value as int, increment and set ex: incr k incrby: ex: incrby k n decr decrby: ex: decrby k n queries: get: get k exists: info: return 1 or 0 ex: exists k type: info: returns the type of the value at key ex: type k ttl: info: get seconds left until key expires ex: ttl k pttl: info: get milliseconds left until key expires ex: pttl k multi-key: mset: ex: mset k1 v1 k2 v2 k3 v3 mget: info: returns an array ex: mset k1 k2 k3 list: lpush: info: push a number of elements at the head ex: lpush k 2 1 =&amp;gt; 1, 2 ex: lpush k 100 150 =&amp;gt; 150, 100 rpush: info: push a number of elements at the tail ex: rpush k 3 4 =&amp;gt; 3, 4 ex: rpush k 100 150 =&amp;gt; 100, 150 lrange: info: list elements between specified range limits n and m lrange k n m =&amp;gt; &amp;gt;= n &amp;amp;&amp;amp; &amp;lt;= m ex: lrange k n m llen: ex: llen k lpop: info: pop from k head, optionally n elements ex: lpop k [n] rpop: info: pop from k tail, optionally n elements ex: rpop k [n] set: smembers: info: get all members ex: smembers k sadd: ex: sadd k v1 v2 vn sismember: info: check if value is in set return 1 or 0 ex: sismember k v sinter: info: a inner join between two sets returns another set ex: sinter k1 k2 sinterstore: info: a inner join between two sets returns another set and saves it in dest ex: sinterstore dest k1 k2 scard: info: number of members in set ex: scard k srem: info: remove members return number of members removed ex: srem k v1 v2 vn set: hset: ex: hset k f1 v1 f2 v2 fn vn hget: ex: hget k f hmget: ex: hmget k f1 f2 fn hkeys: ex: hkeys k hvals: ex: hvals k hlen: info: number of keys ex: hlen k hexists: info: check if field exists in key return 1 or 0 ex: hexists k f hdel: ex: hdel k f1 f2 fn data structures: strings: misc: a sequence of bytes types: text serialized objects binary arrays lists: misc: a sequence of ordered elements they are implemented as linked lists: access: O(n) add at head: O(1) add at tail: O(1) if accessing at the middle is important, use sorted sets sets hashes sorted sets streams geospatial hyperlog bitmaps bitfields</description></item><item><title>Sqlite</title><link>https://www.dinudev.com/post/sqlite/</link><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/sqlite/</guid><description>types of file formats: file format: store a single object application format: store multiple objects types of application formats: custom: custom opaque blobs of data that can only be interpreted by a particular application pile-of-files: the application uses the fs as a key/value database one root dir with multiple children that can contain other dirs or files the file paths are the keys and the file contents are the values wrapped pile-of-files: a pile-of-files wrapped in a container(zip, tar, etc) data types: sqlite has no data types: creating a table does not require data types for columns, ex: CREATE TABLE example(col1, col2, col3) when inserting a different data type, sqlite first tries to convert to proper type sqlite will store the data, making datatypes essentially recommandations, not requirements!</description></item><item><title>PostgreSQL</title><link>https://www.dinudev.com/post/postgresql/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/post/postgresql/</guid><description>Why postgresql?: they say they are fast stored procedures and functions in a lot of languages: python, ruby, c, sql, javascript, r, perl a lot more built-in types + custom types can be used not only as a db, but as a development platform mature: 20 years of development licensing: distribute, modify, commercial use allowed can&amp;rsquo;t hold liable you must include copyright and license Why not?: mainly geared thowards big enterprise uses: big installation size complex security settings not recommended as a cache server not recommended for simplistic crud applications What are some common administration tools?</description></item></channel></rss>