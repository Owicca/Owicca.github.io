<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer science on Down the wabbit&#39;s hole</title>
    <link>https://www.dinudev.com/categories/computer-science/</link>
    <description>Recent content in Computer science on Down the wabbit&#39;s hole</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.dinudev.com/categories/computer-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SICP</title>
      <link>https://www.dinudev.com/post/sicp/</link>
      <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.dinudev.com/post/sicp/</guid>
      <description>Scheme syntax:  reverse enginered from book code snipets and &amp;ldquo;trial and error&amp;rdquo; start_delimiter = &amp;#34;(&amp;#34;; end_delimiter = &amp;#34;)&amp;#34;; space = &amp;#34; &amp;#34;; definition_keyword = &amp;#34;define&amp;#34;; keyword = definition_keyword; digit = &amp;#34;1&amp;#34;|&amp;#34;2&amp;#34;|&amp;#34;3&amp;#34;|&amp;#34;4&amp;#34;|&amp;#34;5&amp;#34;|&amp;#34;6&amp;#34;|&amp;#34;7&amp;#34;|&amp;#34;8&amp;#34;|&amp;#34;9&amp;#34; [{, &amp;#34;0&amp;#34;|&amp;#34;1&amp;#34;|&amp;#34;2&amp;#34;|&amp;#34;3&amp;#34;|&amp;#34;4&amp;#34;|&amp;#34;5&amp;#34;|&amp;#34;6&amp;#34;|&amp;#34;7&amp;#34;|&amp;#34;8&amp;#34;|&amp;#34;9&amp;#34; }]; float = digit , &amp;#34;.&amp;#34; , digit [{, digit }]; number = digit [{, digit }]; alpha_character = {a...z}|{A...Z} character = alpha_character|&amp;#34;_&amp;#34;|digit|float; string = alpha_character [{, character }]; primitive_operator = &amp;#34;+&amp;#34;|&amp;#34;-&amp;#34;|&amp;#34;*&amp;#34;|&amp;#34;/&amp;#34;|&amp;#34;%&amp;#34;; operator = primitive_operator|expression_between_parentheses; expression_between_parentheses = start_delimiter , space , expression , space , end_delimiter; expression = start_delimiter , [operator] , space , digit|float|number|character|string|expression,function_call [{, space , digit|float|number|character|string|expression|function_call }] , space , end_delimiter;(* can a compound operator receive a single param?</description>
    </item>
    
    <item>
      <title>Computer Science</title>
      <link>https://www.dinudev.com/post/cs/</link>
      <pubDate>Sun, 01 Mar 2020 17:22:00 +0200</pubDate>
      
      <guid>https://www.dinudev.com/post/cs/</guid>
      <description>General:  everything that is tedious is error-prone try to design your types so that values are guaranteed to be valid:  hide the representation provide a constructor that creates only valid objects design all member functions to expect valid values and leave only valid values behind when they return  a rule for what constitues an valid values is an invariant types for objects in main memory is the same as formats for files on disk  Interface construction rules:  keep interfaces complete keep interfaces minimal provide constructors support copying(or prohibit it) use types to provide good argument checking identify nonmodifying member functions free all resources in the destructor  Attributes of a program:  should produce the desired results for all legal inputs should give reasonable error messages for all ilegal imputs need not worry about misbehaving hardware need not worry about misbehaving system software is allowed to terminate after finding an error  Approaches to acceptable software:  organize software to minimize errors eliminate most of the errors we made through debugging and testing make sure the remaining errors are not serious  Sources of errors:  Poor specification: if we are not specific of the software functionality we can&amp;rsquo;t asses the &amp;ldquo;dark corners&amp;rdquo; and make sure all cases are handled Incomplete programs: know when you handled all the cases Unexpected arguments Unexpected input Unexpected state Logical Errors: code that simply does not do what is supposed to do  Types of errors:  compile-time:  syntax errors type errors(values assigned to variables of the wrong tipe) non-errors(area(10, -7), a rectangle can&amp;rsquo;t have a negative width, but the pc can&amp;rsquo;t know that)  link-time:  every function in the program must be declared with exactly the same type in every translation unit in which is used every function must be defined exactly once in the program  run-time logic errors  Debugging:  how would i know if the program actually worked correctly?</description>
    </item>
    
  </channel>
</rss>