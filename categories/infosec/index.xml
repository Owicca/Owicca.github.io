<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Infosec on Down the wabbit's hole</title><link>https://www.dinudev.com/categories/infosec/</link><description>Recent content in Infosec on Down the wabbit's hole</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.dinudev.com/categories/infosec/index.xml" rel="self" type="application/rss+xml"/><item><title>OTW Natas0</title><link>https://www.dinudev.com/journey/otw_natas0/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas0/</guid><description>steps: check page source, the flag is present in a comment</description></item><item><title>OTW Natas1</title><link>https://www.dinudev.com/journey/otw_natas1/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas1/</guid><description>steps: on the body tag there is an event on right-click(context menu) that returns false, blocking you from trying to inspect the page try other ways to see the source: F12, CTRL+u, etc read the page source, the flag is present in a comment</description></item><item><title>OTW Natas10</title><link>https://www.dinudev.com/journey/otw_natas10/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas10/</guid><description>steps: exactly the same setup as natas9, but this time there is a weak filtering on user input /[;|&amp;amp;]/ we will try to hunt for /etc/natas_webpass/natas11 at the same time circumventing the filter, the filter denies the use of: ;: multiple commands on the same line |: piping &amp;amp;: sending a process to the background if we are stuck with the current grep, we can exploit the fact that grep can search through multiple files by aiming for a grep of the entire contents of multiple files(grep -i '.</description></item><item><title>OTW Natas11</title><link>https://www.dinudev.com/journey/otw_natas11/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas11/</guid><description>steps: page source shows there are 4 main logic parts: encrypt some data using xor encryption 1 load the data from a cookie data store an array to the same data cookie if showpassword is yes, show the flag to show the flag we need showpassword set to yes: we can&amp;rsquo;t modify the default data the default data is overwriten by the data in the data cookie we need to write a script that uses an array with &amp;ldquo;showpassword&amp;rdquo; set to &amp;ldquo;yes&amp;rdquo;,</description></item><item><title>OTW Natas12</title><link>https://www.dinudev.com/journey/otw_natas12/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas12/</guid><description>steps: we once again get access to the source code the source has a bunch of logic but the only usefull one is the big if/else at the end and makeRandomPathFromFilename in the if at the end a filepath is generated starting from the file input value,
the file uploaded is checked to be bellow a certain size,
if the check passes the uploaded file is copied in the generated filepath.</description></item><item><title>OTW Natas13</title><link>https://www.dinudev.com/journey/otw_natas13/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas13/</guid><description>steps: lessons:</description></item><item><title>OTW Natas2</title><link>https://www.dinudev.com/journey/otw_natas2/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas2/</guid><description>steps: check the page source the only relevant info in the body is a link to a 1x1 png image going further up the folder to see what other files are there we discover a users.txt that among other users contains the flag lessons: disable autoindex if autoindex is needed, think carefuly what data you might be exposing to the public</description></item><item><title>OTW Natas3</title><link>https://www.dinudev.com/journey/otw_natas3/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas3/</guid><description>steps: check the page source a comment hints that &amp;ldquo;Not even Google&amp;rdquo; will find the flag, the hint refers to the way google indexes websites1 by accessing /robots.txt we see a particular dir is dissalowed(bots shouldn&amp;rsquo;t crawl it), /s3cr3t/ the dir contains a file that contains the flag lessons: making a dir public but dissalowing it does not mean malicious actors (hackers, osint analysts, curious entities, bots that ignore robots.txt) won&amp;rsquo;t access it Google indexes websites by following links from external sites that point to your website(backlinks).</description></item><item><title>OTW Natas4</title><link>https://www.dinudev.com/journey/otw_natas4/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas4/</guid><description>steps: The page says the access is allowed only from natas5 i presume the page reads the referer, so after a quick curl request modeled on the /index.php request from the link in the page1 we get a page that contains the flag lessons: some headers are controlled by the user, don&amp;rsquo;t rely on them: User-Agent Referrer A curl request with the Referer modified to natas5:
curl &amp;#39;http://natas4.natas.labs.overthewire.org/index.php&amp;#39; \ -H &amp;#39;Authorization: Basic &amp;lt;basic_auth_token_here&amp;gt;&amp;#39; \ -H &amp;#39;Referer: http://natas5.</description></item><item><title>OTW Natas5</title><link>https://www.dinudev.com/journey/otw_natas5/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas5/</guid><description>steps: The page says the access is dissalowed because we are not logged in nothing stands out in page source in the requests headers we see a particularly named cookie loggedin with value 0 after changing the value of the cookie to 1 1 and a refresh we get the flag lessons: cookies are used to store state, but their content is fully controlled by the user encrypt cookies ignore invalid cookies Set the cookie to 1:</description></item><item><title>OTW Natas6</title><link>https://www.dinudev.com/journey/otw_natas6/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas6/</guid><description>steps: there is a link that points to the php source code of the page php script includes a certain /includes/secret.inc, then checks if a $secret value is equal to our input if we access the /includes/secret.inc page and check the source we see the variable definition using the value from $secret for the input and we get the flag lessons: don&amp;rsquo;t leave private/internal data in page comments be carefull what endpoints you expose to the internet</description></item><item><title>OTW Natas7</title><link>https://www.dinudev.com/journey/otw_natas7/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas7/</guid><description>steps: by checking the page source we get a hint(a path) from the comment where the flag might be the two links in the page have a page param, that probably specifies the path of the html page to be loaded by trying some random paths as page value we get errors that hits towards a path/directory transversal 1 by using the path in the comments as url param value /index.</description></item><item><title>OTW Natas8</title><link>https://www.dinudev.com/journey/otw_natas8/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas8/</guid><description>steps: a input is present and a link to the source code, the source code reveals the input is processed through a function and compared to a static value create a function that runs the operations in the oposite direction 1, modeled by the function from the source by sending the static value found in the source code through our function we get the initial input use the initial input in the page and we will get the flag lessons: this is probably a simple introduction to hashing &amp;lt;?</description></item><item><title>OTW Natas9</title><link>https://www.dinudev.com/journey/otw_natas9/</link><pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/otw_natas9/</guid><description>steps: the page searches for an input in a particular file the code source shows the user input is sent without validation through a php passthru to the os, this hints to a shell injection 1 by sending a .* we get the entire contents of the file by sending ; id; we get the php user remembering from natas description that All passwords are also stored in /etc/natas_webpass/., we try ; cat /etc/natas_webpass/natas10; and get the flag lessons: never use raw user input if you are forced to use user input, sanitize it before using Shell injection allows the user to run arbitrary commands on the server os.</description></item><item><title>Jetbrains license server</title><link>https://www.dinudev.com/journey/jb_license_server/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/jb_license_server/</guid><description>logic: a tls priv-public key pair exists clients have the public key, the servers have the private key the client sends a request with his unique set of identifying information encoded response = rsa detached signature = hash the content then sign with private key the server checks the info and sends a response back: the response is the content + encoded response signing: encode data to be signed as string, then hash with md5, then sign the resulted detached signature is the encoded response methods: endpoints: /rpc/ping.</description></item><item><title>WrapLogin</title><link>https://www.dinudev.com/journey/wraplogin/</link><pubDate>Mon, 26 Jul 2021 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/wraplogin/</guid><description>flow: setup a signal handler h for signum n: n = 14d = SIGALRM h = connection connection: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) schedule a n seconds signal alarm: n = 1d alarm(1) emulate &amp;ldquo;/bin/login&amp;rdquo; by asking a password from the user if password == &amp;ldquo;door&amp;rdquo;: alarm(0) execl(&amp;quot;/bin/sh&amp;quot;, &amp;quot;/bin/sh&amp;quot;, &amp;quot;-i&amp;quot;) exit(0) else: execv(&amp;quot;/bin/.login&amp;quot;, *app_list_of_arguments[]) exit(0) imports: execl execv strcmp signal scanf alarm exports: execute connection passwd strings: /bin/login door /bin/sh /bin/.login /export/home/gb.local/rpm/BUILD/glibc-2.3.1/build-i586-linux/csu/crti.S /export/home/gb.</description></item><item><title>Info</title><link>https://www.dinudev.com/journey/info/</link><pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate><guid>https://www.dinudev.com/journey/info/</guid><description>Introduction: The best way to learn something fast is to start doing it.
This is the beginning of my journey in infosec.</description></item></channel></rss>